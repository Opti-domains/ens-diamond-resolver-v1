{
  "address": "0xF54e60b6926504A2Ce79214274201257a19e8FD7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract INameWrapperRegistry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "NotResolver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "about",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "AttestationCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "about",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "_readAttestation",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "attest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationStation",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "attestations",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "flags",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "buildAttestationData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "about",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes"
            }
          ],
          "internalType": "struct AttestationStation.AttestationData[]",
          "name": "att",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "increaseVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readAttestation",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readAttestation",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readAttestationNV",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "readVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract INameWrapperRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4905e3cf0eb7a59bb0e752423e606861c006ae4075c9b826c722b860199f244",
  "receipt": {
    "to": null,
    "from": "0x000000187c72ee4a4120a3E626425595a34F185B",
    "contractAddress": "0xF54e60b6926504A2Ce79214274201257a19e8FD7",
    "transactionIndex": 1,
    "gasUsed": "1457212",
    "logsBloom": "0x
    "blockHash": "0x921187d9182b3e03d2a91a0228019b175a5b5e51e037230472216d0711f134f4",
    "transactionHash": "0xb4905e3cf0eb7a59bb0e752423e606861c006ae4075c9b826c722b860199f244",
    "logs": [],
    "blockNumber": 8868413,
    "cumulativeGasUsed": "1521201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x74070dBcf0F68fa1F73092642CD9275Df52C1DD2",
    "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77"
  ],
  "numDeployments": 1,
  "solcInputHash": "016796894504856f5784c3456a738903",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INameWrapperRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NotResolver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"about\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"AttestationCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"about\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"_readAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationStation\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attestations\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"buildAttestationData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"about\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"internalType\":\"struct AttestationStation.AttestationData[]\",\"name\":\"att\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"increaseVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readAttestationNV\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"readVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract INameWrapperRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AttestationCreated(address,address,bytes32,bytes)\":{\"params\":{\"about\":\"Address attestation is about.\",\"creator\":\"Address that made the attestation.\",\"key\":\"Key of the attestation.\",\"val\":\"Value of the attestation.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AttestationCreated(address,address,bytes32,bytes)\":{\"notice\":\"Emitted when Attestation is created.\"}},\"kind\":\"user\",\"methods\":{\"attestations(address,address,bytes32)\":{\"notice\":\"Maps addresses to attestations. Creator => About => Key => Value.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/attestation/OptiDomainsAttestation.sol\":\"OptiDomainsAttestation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2499},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title Semver\\n * @notice Semver is a simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    /**\\n     * @notice Contract version number (major).\\n     */\\n    uint256 private immutable MAJOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (minor).\\n     */\\n    uint256 private immutable MINOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (patch).\\n     */\\n    uint256 private immutable PATCH_VERSION;\\n\\n    /**\\n     * @param _major Version number (major).\\n     * @param _minor Version number (minor).\\n     * @param _patch Version number (patch).\\n     */\\n    constructor(\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) {\\n        MAJOR_VERSION = _major;\\n        MINOR_VERSION = _minor;\\n        PATCH_VERSION = _patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(MAJOR_VERSION),\\n                    \\\".\\\",\\n                    Strings.toString(MINOR_VERSION),\\n                    \\\".\\\",\\n                    Strings.toString(PATCH_VERSION)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x400059d3edb9efc9c23e6fbc18de6710f9235a4ffba4ab23bdb9f825273f093b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/attestation/AttestationStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport { Semver } from \\\"@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AttestationStation\\r\\n * @author Optimism Collective\\r\\n * @author Gitcoin\\r\\n * @notice Where attestations live.\\r\\n */\\r\\ncontract AttestationStation is Semver {\\r\\n    /**\\r\\n     * @notice Struct representing data that is being attested.\\r\\n     *\\r\\n     * @custom:field about Address for which the attestation is about.\\r\\n     * @custom:field key   A bytes32 key for the attestation.\\r\\n     * @custom:field val   The attestation as arbitrary bytes.\\r\\n     */\\r\\n    struct AttestationData {\\r\\n        address about;\\r\\n        bytes32 key;\\r\\n        bytes val;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\\r\\n     */\\r\\n    mapping(address => mapping(address => mapping(bytes32 => bytes))) public attestations;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Attestation is created.\\r\\n     *\\r\\n     * @param creator Address that made the attestation.\\r\\n     * @param about   Address attestation is about.\\r\\n     * @param key     Key of the attestation.\\r\\n     * @param val     Value of the attestation.\\r\\n     */\\r\\n    event AttestationCreated(\\r\\n        address indexed creator,\\r\\n        address indexed about,\\r\\n        bytes32 indexed key,\\r\\n        bytes val\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @custom:semver 1.1.0\\r\\n     */\\r\\n    constructor() Semver(1, 1, 0) {}\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to create an attestation.\\r\\n     *\\r\\n     * @param _about Address that the attestation is about.\\r\\n     * @param _key   A key used to namespace the attestation.\\r\\n     * @param _val   An arbitrary value stored as part of the attestation.\\r\\n     */\\r\\n    function attest(\\r\\n        address _about,\\r\\n        bytes32 _key,\\r\\n        bytes memory _val\\r\\n    ) public {\\r\\n        attestations[msg.sender][_about][_key] = _val;\\r\\n\\r\\n        emit AttestationCreated(msg.sender, _about, _key, _val);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to create attestations.\\r\\n     *\\r\\n     * @param _attestations An array of attestation data.\\r\\n     */\\r\\n    function attest(AttestationData[] calldata _attestations) external {\\r\\n        uint256 length = _attestations.length;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            AttestationData memory attestation = _attestations[i];\\r\\n\\r\\n            attest(attestation.about, attestation.key, attestation.val);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2b36eaa050d38a152b9fa7195cc5105ec9b9693482766e50eba3e0dd0106393a\",\"license\":\"MIT\"},\"contracts/attestation/OptiDomainsAttestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport {INameWrapperRegistry} from \\\"../diamond-resolver/INameWrapperRegistry.sol\\\";\\r\\nimport \\\"./AttestationStation.sol\\\";\\r\\n\\r\\nbytes32 constant VERSION_KEY = keccak256(\\\"optidomains.resolver.VersionStorage\\\");\\r\\n\\r\\nerror NotResolver(address caller, address resolver);\\r\\n\\r\\ncontract OptiDomainsAttestation {\\r\\n    INameWrapperRegistry public immutable registry;\\r\\n    AttestationStation public immutable attestationStation;\\r\\n    bool public attestationActivated;\\r\\n\\r\\n    // In case attestation is not created -> simulate it in this contract\\r\\n\\r\\n    /**\\r\\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\\r\\n     */\\r\\n    mapping(address => mapping(address => mapping(bytes32 => bytes)))\\r\\n        public attestations;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Attestation is created.\\r\\n     *\\r\\n     * @param creator Address that made the attestation.\\r\\n     * @param about   Address attestation is about.\\r\\n     * @param key     Key of the attestation.\\r\\n     * @param val     Value of the attestation.\\r\\n     */\\r\\n    event AttestationCreated(\\r\\n        address indexed creator,\\r\\n        address indexed about,\\r\\n        bytes32 indexed key,\\r\\n        bytes val\\r\\n    );\\r\\n\\r\\n    function _attestLocal(address _about, bytes32 _key, bytes memory _val) internal {\\r\\n        attestations[address(this)][_about][_key] = _val;\\r\\n        emit AttestationCreated(address(this), _about, _key, _val);\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) private view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size > 0);\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        INameWrapperRegistry _registry,\\r\\n        AttestationStation _attestationStation\\r\\n    ) {\\r\\n        registry = _registry;\\r\\n        attestationStation = _attestationStation;\\r\\n        attestationActivated = isContract(address(_attestationStation));\\r\\n    }\\r\\n\\r\\n    function activate() public {\\r\\n        attestationActivated = isContract(address(attestationStation));\\r\\n    }\\r\\n\\r\\n    function _attest(AttestationStation.AttestationData[] memory _attestations) internal {\\r\\n        if (attestationActivated) {\\r\\n            attestationStation.attest(_attestations);\\r\\n        } else {\\r\\n            uint256 length = _attestations.length;\\r\\n            for (uint256 i = 0; i < length; ) {\\r\\n                AttestationStation.AttestationData memory attestation = _attestations[i];\\r\\n\\r\\n                _attestLocal(attestation.about, attestation.key, attestation.val);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _readAttestation(address creator, address about, bytes32 key) public view returns(bytes memory) {\\r\\n        if (attestationActivated) {\\r\\n            return attestationStation.attestations(creator, about, key);\\r\\n        } else {\\r\\n            return attestations[creator][about][key];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _readVersion(address owner, bytes32 node) internal view returns(uint64) {\\r\\n        bytes memory response = _readAttestation(address(this), owner, keccak256(abi.encodePacked(node, VERSION_KEY)));\\r\\n        if (response.length == 0) return 0;\\r\\n        return abi.decode(response, (uint64));\\r\\n    }\\r\\n\\r\\n    function readVersion(bytes32 node) public view returns(uint64) {\\r\\n        return _readVersion(registry.ownerOf(node), node);\\r\\n    }\\r\\n\\r\\n    function readAttestation(address creator, bytes32 node, bytes32 key) public view returns(bytes memory) {\\r\\n        address owner = registry.ownerOf(node);\\r\\n        uint64 version = _readVersion(owner, node);\\r\\n        return _readAttestation(creator, owner, keccak256(abi.encodePacked(node, key, version)));\\r\\n    }\\r\\n\\r\\n    function readAttestation(bytes32 node, bytes32 key) public view returns(bytes memory) {\\r\\n        return readAttestation(address(this), node, key);\\r\\n    }\\r\\n\\r\\n    function readAttestationNV(address creator, bytes32 node, bytes32 key) public view returns(bytes memory) {\\r\\n        address owner = registry.ownerOf(node);\\r\\n        return _readAttestation(creator, owner, keccak256(abi.encodePacked(node, key)));\\r\\n    }\\r\\n\\r\\n    // External attestor\\r\\n    function buildAttestationData(bytes32 node, bytes32 key, uint256 flags, bytes memory value) public view returns(AttestationStation.AttestationData[] memory att) {\\r\\n        address owner = registry.ownerOf(node);\\r\\n\\r\\n        require(flags > 0 && flags < 8, \\\"Invalid flags\\\");\\r\\n\\r\\n        bool useOwner = (flags & 1) > 0;\\r\\n        bool useVersion = (flags & 2) > 0;\\r\\n        bool useNodeOnly = (flags % 4) > 0;\\r\\n\\r\\n        uint256 length;\\r\\n\\r\\n        assembly {\\r\\n            // SAFETY: Simple bool-to-int cast.\\r\\n            length := add(add(useOwner, useVersion), useNodeOnly)\\r\\n        }\\r\\n        \\r\\n        att = new AttestationStation.AttestationData[](length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n\\r\\n        if (useOwner) {\\r\\n            att[i++] = AttestationStation.AttestationData({\\r\\n                about: owner,\\r\\n                key: keccak256(abi.encodePacked(node, key)),\\r\\n                val: value\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (useVersion) {\\r\\n            uint64 version = _readVersion(owner, node);\\r\\n\\r\\n            att[i++] = AttestationStation.AttestationData({\\r\\n                about: owner,\\r\\n                key: keccak256(abi.encodePacked(node, key, version)),\\r\\n                val: value\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (useNodeOnly) {\\r\\n            att[i++] = AttestationStation.AttestationData({\\r\\n                about: address(0),\\r\\n                key: keccak256(abi.encodePacked(node, key)),\\r\\n                val: value\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Attest by resolver\\r\\n    function attest(bytes32 node, bytes32 key, bytes memory value) public {\\r\\n        address resolver = registry.ens().resolver(node);\\r\\n        if (msg.sender != resolver) {\\r\\n            revert NotResolver(msg.sender, resolver);\\r\\n        }\\r\\n\\r\\n        address owner = registry.ownerOf(node);\\r\\n        uint64 version = _readVersion(owner, node);\\r\\n\\r\\n        // AttestationStation.AttestationData[] memory att = buildAttestationData(node, key, 3, value);\\r\\n\\r\\n        AttestationStation.AttestationData[] memory att = new AttestationStation.AttestationData[](2);\\r\\n        \\r\\n        att[0] = AttestationStation.AttestationData({\\r\\n            about: owner,\\r\\n            key: keccak256(abi.encodePacked(node, key)),\\r\\n            val: value\\r\\n        });\\r\\n\\r\\n        att[1] = AttestationStation.AttestationData({\\r\\n            about: owner,\\r\\n            key: keccak256(abi.encodePacked(node, key, version)),\\r\\n            val: value\\r\\n        });\\r\\n\\r\\n        _attest(att);\\r\\n    }\\r\\n\\r\\n    // Increase version by resolver\\r\\n    function increaseVersion(bytes32 node) public {\\r\\n        address resolver = registry.ens().resolver(node);\\r\\n        if (msg.sender != resolver) {\\r\\n            revert NotResolver(msg.sender, resolver);\\r\\n        }\\r\\n\\r\\n        address owner = registry.ownerOf(node);\\r\\n        uint64 version = _readVersion(owner, node);\\r\\n\\r\\n        AttestationStation.AttestationData[] memory att = new AttestationStation.AttestationData[](1);\\r\\n        \\r\\n        att[0] = AttestationStation.AttestationData({\\r\\n            about: owner,\\r\\n            key: keccak256(abi.encodePacked(node, VERSION_KEY)),\\r\\n            val: abi.encode(version + 1)\\r\\n        });\\r\\n\\r\\n        _attest(att);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8c008cb86b26aed9e2cb69603356610ab7135a22cebc04a0afdcc24613ad0b90\",\"license\":\"MIT\"},\"contracts/diamond-resolver/INameWrapperRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\r\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\ninterface INameWrapperRegistry {\\r\\n  function ens() external view returns(ENS);\\r\\n  function attestation() external view returns(address);\\r\\n  function forward(INameWrapper wrapper) external view returns(INameWrapper);\\r\\n  function backward(INameWrapper wrapper) external view returns(INameWrapper);\\r\\n  function isNameWrapper(address wrapper) external view returns(bool);\\r\\n  function ownerOf(bytes32 node) external view returns(address);\\r\\n\\r\\n  function upgrade(INameWrapper _old, INameWrapper _new) external;\\r\\n  function setAttestation(address _attestation) external;\\r\\n}\\r\\n\\r\\ninterface IHasNameWrapperRegistry {\\r\\n  function registry() external view returns(INameWrapperRegistry);\\r\\n}\",\"keccak256\":\"0x5aad060ec47d9b97c9bda699f787b4644aa457a48f4fb2afa333e0b9a297e262\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x9ac51351ff72d73083aed62b7cdad4c07e9d1eb68401d7fd8457bdd828f2c6fe\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001a2f38038062001a2f83398101604081905262000034916200007f565b6001600160a01b0391821660805290811660a0526000805460ff1916913b63ffffffff161515919091179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b60805160a0516118fe620001316000396000818161013d015281816101a5015281816102fd01526111c20152600081816101f7015281816104e201528181610643015281816107e60152818161094201528181610b7101528181610c7f01528181610fe901526110a501526118fe6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636f7f26f01161008c5780639cc08aa6116100665780639cc08aa61461022c578063eb50798c1461024c578063ec55b67514610269578063eff94ac71461027c57600080fd5b80636f7f26f0146101df5780637b103999146101f25780637fadb0971461021957600080fd5b80632d4d6ccf116100bd5780632d4d6ccf1461017a5780633e57d2691461018d57806365a0aee2146101a057600080fd5b80630361d39d146100e45780630f15f4c01461010d57806329b42cb514610167575b600080fd5b6100f76100f2366004611312565b6102a8565b60405161010491906113a3565b60405180910390f35b610165600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001663ffffffff7f00000000000000000000000000000000000000000000000000000000000000003b161515179055565b005b6100f7610175366004611312565b610433565b6101656101883660046113b6565b6104de565b61016561019b366004611494565b6107e2565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610104565b6100f76101ed3660046114e4565b610b37565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6100f7610227366004611506565b610b4d565b61023f61023a36600461153b565b610c5b565b6040516101049190611595565b6000546102599060ff1681565b6040519015158152602001610104565b6100f7610277366004611506565b610fc5565b61028f61028a3660046113b6565b611080565b60405167ffffffffffffffff9091168152602001610104565b60005460609060ff1615610373576040517f29b42cb50000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036c919081019061163b565b905061042c565b6001600160a01b038085166000908152600160209081526040808320938716835292815282822085835290522080546103ab906116a9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d7906116a9565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b505050505090505b9392505050565b60016020908152600093845260408085208252928452828420905282529020805461045d906116a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610489906116a9565b80156104d65780601f106104ab576101008083540402835291602001916104d6565b820191906000526020600020905b8154815290600101906020018083116104b957829003601f168201915b505050505081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f15457f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056291906116e3565b6001600160a01b0316630178b8bf836040518263ffffffff1660e01b815260040161058f91815260200190565b602060405180830381865afa1580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d091906116e3565b9050336001600160a01b0382161461062a576040517f5616a3900000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03821660248201526044015b60405180910390fd5b604051637dd5641160e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637dd5641190602401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906116e3565b905060006106c48285611112565b60408051600180825281830190925291925060009190816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816106df5790505090506040518060600160405280846001600160a01b03168152602001867f9a80e7657ea10abdcccf23b8c937883af263d07b25ceeca613c24610c6fb3540604051602001610766929190918252602082015260400190565b60408051601f19818403018152919052805160209182012082520161078c846001611716565b6040805167ffffffffffffffff909216602083015201604051602081830303815290604052815250816000815181106107c7576107c761173e565b60200260200101819052506107db81611187565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f15457f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906116e3565b6001600160a01b0316630178b8bf856040518263ffffffff1660e01b815260040161089391815260200190565b602060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d491906116e3565b9050336001600160a01b03821614610929576040517f5616a3900000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0382166024820152604401610621565b604051637dd5641160e01b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637dd5641190602401602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906116e3565b905060006109c38287611112565b6040805160028082526060820190925291925060009190816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816109df5790505090506040518060600160405280846001600160a01b031681526020018888604051602001610a46929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020018681525081600081518110610a7857610a7861173e565b60200260200101819052506040518060600160405280846001600160a01b03168152602001888885604051602001610ae893929190928352602083019190915260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016604082015260480190565b6040516020818303038152906040528051906020012081526020018681525081600181518110610b1a57610b1a61173e565b6020026020010181905250610b2e81611187565b50505050505050565b6060610b44308484610b4d565b90505b92915050565b604051637dd5641160e01b8152600481018390526060906000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc91906116e3565b90506000610bea8286611112565b60408051602081018890529081018690527fffffffffffffffff00000000000000000000000000000000000000000000000060c083901b166060820152909150610c5190879084906068015b604051602081830303815290604052805190602001206102a8565b9695505050505050565b604051637dd5641160e01b8152600481018590526060906000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea91906116e3565b9050600084118015610cfc5750600884105b610d62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666c616773000000000000000000000000000000000000006044820152606401610621565b600184161515600285161515600080610d7c600489611754565b11905082820181018067ffffffffffffffff811115610d9d57610d9d6113cf565b604051908082528060200260200182016040528015610dea57816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610dbb5790505b50955060008415610e72576040518060600160405280876001600160a01b031681526020018c8c604051602001610e2b929190918252602082015260400190565b60408051601f1981840301815291905280516020918201208252018990528782610e5481611776565b935081518110610e6657610e6661173e565b60200260200101819052505b8315610f33576000610e84878d611112565b90506040518060600160405280886001600160a01b031681526020018d8d84604051602001610eeb93929190928352602083019190915260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016604082015260480190565b60408051601f1981840301815291905280516020918201208252018a90528883610f1481611776565b945081518110610f2657610f2661173e565b6020026020010181905250505b8215610fb757604051806060016040528060006001600160a01b031681526020018c8c604051602001610f70929190918252602082015260400190565b60408051601f1981840301815291905280516020918201208252018990528782610f9981611776565b935081518110610fab57610fab61173e565b60200260200101819052505b505050505050949350505050565b604051637dd5641160e01b8152600481018390526060906000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105491906116e3565b905061107785828686604051602001610c36929190918252602082015260400190565b95945050505050565b604051637dd5641160e01b815260048101829052600090610b47906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111091906116e3565b835b6000806111563085857f9a80e7657ea10abdcccf23b8c937883af263d07b25ceeca613c24610c6fb3540604051602001610c36929190918252602082015260400190565b9050805160000361116b576000915050610b47565b8080602001905181019061117f9190611790565b949350505050565b60005460ff1615611225576040517f5eb5ea100000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906111f7908490600401611595565b600060405180830381600087803b15801561121157600080fd5b505af11580156107db573d6000803e3d6000fd5b805160005b818110156112705760008382815181106112465761124661173e565b60200260200101519050611267816000015182602001518360400151611276565b5060010161122a565b50505b50565b3060009081526001602090815260408083206001600160a01b0387168452825280832085845290915290206112ab8282611808565b5081836001600160a01b0316306001600160a01b03167f28710dfecab43d1e29e02aa56b2e1e610c0bae19135c9cf7a83a1adb6df96d85846040516112f091906113a3565b60405180910390a4505050565b6001600160a01b038116811461127357600080fd5b60008060006060848603121561132757600080fd5b8335611332816112fd565b92506020840135611342816112fd565b929592945050506040919091013590565b60005b8381101561136e578181015183820152602001611356565b50506000910152565b6000815180845261138f816020860160208601611353565b601f01601f19169290920160200192915050565b602081526000610b446020830184611377565b6000602082840312156113c857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561140e5761140e6113cf565b604052919050565b600067ffffffffffffffff821115611430576114306113cf565b50601f01601f191660200190565b600082601f83011261144f57600080fd5b813561146261145d82611416565b6113e5565b81815284602083860101111561147757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156114a957600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156114ce57600080fd5b6114da8682870161143e565b9150509250925092565b600080604083850312156114f757600080fd5b50508035926020909101359150565b60008060006060848603121561151b57600080fd5b8335611526816112fd565b95602085013595506040909401359392505050565b6000806000806080858703121561155157600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561157d57600080fd5b6115898782880161143e565b91505092959194509250565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561162d578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180516001600160a01b031684528781015188850152860151606087850181905261161981860183611377565b9689019694505050908601906001016115bc565b509098975050505050505050565b60006020828403121561164d57600080fd5b815167ffffffffffffffff81111561166457600080fd5b8201601f8101841361167557600080fd5b805161168361145d82611416565b81815285602083850101111561169857600080fd5b611077826020830160208601611353565b600181811c908216806116bd57607f821691505b6020821081036116dd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156116f557600080fd5b815161042c816112fd565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81811683821601908082111561173757611737611700565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60008261177157634e487b7160e01b600052601260045260246000fd5b500690565b6000600019820361178957611789611700565b5060010190565b6000602082840312156117a257600080fd5b815167ffffffffffffffff8116811461042c57600080fd5b601f82111561127057600081815260208120601f850160051c810160208610156117e15750805b601f850160051c820191505b81811015611800578281556001016117ed565b505050505050565b815167ffffffffffffffff811115611822576118226113cf565b6118368161183084546116a9565b846117ba565b602080601f83116001811461186b57600084156118535750858301515b600019600386901b1c1916600185901b178555611800565b600085815260208120601f198616915b8281101561189a5788860151825594840194600190910190840161187b565b50858210156118b85787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212208f4b53c1094cf9eb4ce9336d34d8c045a314da8c6932cdb096c5d0f4077f676064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80636f7f26f01161008c5780639cc08aa6116100665780639cc08aa61461022c578063eb50798c1461024c578063ec55b67514610269578063eff94ac71461027c57600080fd5b80636f7f26f0146101df5780637b103999146101f25780637fadb0971461021957600080fd5b80632d4d6ccf116100bd5780632d4d6ccf1461017a5780633e57d2691461018d57806365a0aee2146101a057600080fd5b80630361d39d146100e45780630f15f4c01461010d57806329b42cb514610167575b600080fd5b6100f76100f2366004611312565b6102a8565b60405161010491906113a3565b60405180910390f35b610165600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001663ffffffff7f00000000000000000000000000000000000000000000000000000000000000003b161515179055565b005b6100f7610175366004611312565b610433565b6101656101883660046113b6565b6104de565b61016561019b366004611494565b6107e2565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610104565b6100f76101ed3660046114e4565b610b37565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6100f7610227366004611506565b610b4d565b61023f61023a36600461153b565b610c5b565b6040516101049190611595565b6000546102599060ff1681565b6040519015158152602001610104565b6100f7610277366004611506565b610fc5565b61028f61028a3660046113b6565b611080565b60405167ffffffffffffffff9091168152602001610104565b60005460609060ff1615610373576040517f29b42cb50000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036c919081019061163b565b905061042c565b6001600160a01b038085166000908152600160209081526040808320938716835292815282822085835290522080546103ab906116a9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d7906116a9565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b505050505090505b9392505050565b60016020908152600093845260408085208252928452828420905282529020805461045d906116a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610489906116a9565b80156104d65780601f106104ab576101008083540402835291602001916104d6565b820191906000526020600020905b8154815290600101906020018083116104b957829003601f168201915b505050505081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f15457f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056291906116e3565b6001600160a01b0316630178b8bf836040518263ffffffff1660e01b815260040161058f91815260200190565b602060405180830381865afa1580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d091906116e3565b9050336001600160a01b0382161461062a576040517f5616a3900000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03821660248201526044015b60405180910390fd5b604051637dd5641160e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637dd5641190602401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906116e3565b905060006106c48285611112565b60408051600180825281830190925291925060009190816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816106df5790505090506040518060600160405280846001600160a01b03168152602001867f9a80e7657ea10abdcccf23b8c937883af263d07b25ceeca613c24610c6fb3540604051602001610766929190918252602082015260400190565b60408051601f19818403018152919052805160209182012082520161078c846001611716565b6040805167ffffffffffffffff909216602083015201604051602081830303815290604052815250816000815181106107c7576107c761173e565b60200260200101819052506107db81611187565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f15457f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906116e3565b6001600160a01b0316630178b8bf856040518263ffffffff1660e01b815260040161089391815260200190565b602060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d491906116e3565b9050336001600160a01b03821614610929576040517f5616a3900000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0382166024820152604401610621565b604051637dd5641160e01b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637dd5641190602401602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906116e3565b905060006109c38287611112565b6040805160028082526060820190925291925060009190816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816109df5790505090506040518060600160405280846001600160a01b031681526020018888604051602001610a46929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020018681525081600081518110610a7857610a7861173e565b60200260200101819052506040518060600160405280846001600160a01b03168152602001888885604051602001610ae893929190928352602083019190915260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016604082015260480190565b6040516020818303038152906040528051906020012081526020018681525081600181518110610b1a57610b1a61173e565b6020026020010181905250610b2e81611187565b50505050505050565b6060610b44308484610b4d565b90505b92915050565b604051637dd5641160e01b8152600481018390526060906000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc91906116e3565b90506000610bea8286611112565b60408051602081018890529081018690527fffffffffffffffff00000000000000000000000000000000000000000000000060c083901b166060820152909150610c5190879084906068015b604051602081830303815290604052805190602001206102a8565b9695505050505050565b604051637dd5641160e01b8152600481018590526060906000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea91906116e3565b9050600084118015610cfc5750600884105b610d62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666c616773000000000000000000000000000000000000006044820152606401610621565b600184161515600285161515600080610d7c600489611754565b11905082820181018067ffffffffffffffff811115610d9d57610d9d6113cf565b604051908082528060200260200182016040528015610dea57816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610dbb5790505b50955060008415610e72576040518060600160405280876001600160a01b031681526020018c8c604051602001610e2b929190918252602082015260400190565b60408051601f1981840301815291905280516020918201208252018990528782610e5481611776565b935081518110610e6657610e6661173e565b60200260200101819052505b8315610f33576000610e84878d611112565b90506040518060600160405280886001600160a01b031681526020018d8d84604051602001610eeb93929190928352602083019190915260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016604082015260480190565b60408051601f1981840301815291905280516020918201208252018a90528883610f1481611776565b945081518110610f2657610f2661173e565b6020026020010181905250505b8215610fb757604051806060016040528060006001600160a01b031681526020018c8c604051602001610f70929190918252602082015260400190565b60408051601f1981840301815291905280516020918201208252018990528782610f9981611776565b935081518110610fab57610fab61173e565b60200260200101819052505b505050505050949350505050565b604051637dd5641160e01b8152600481018390526060906000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105491906116e3565b905061107785828686604051602001610c36929190918252602082015260400190565b95945050505050565b604051637dd5641160e01b815260048101829052600090610b47906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637dd5641190602401602060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111091906116e3565b835b6000806111563085857f9a80e7657ea10abdcccf23b8c937883af263d07b25ceeca613c24610c6fb3540604051602001610c36929190918252602082015260400190565b9050805160000361116b576000915050610b47565b8080602001905181019061117f9190611790565b949350505050565b60005460ff1615611225576040517f5eb5ea100000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906111f7908490600401611595565b600060405180830381600087803b15801561121157600080fd5b505af11580156107db573d6000803e3d6000fd5b805160005b818110156112705760008382815181106112465761124661173e565b60200260200101519050611267816000015182602001518360400151611276565b5060010161122a565b50505b50565b3060009081526001602090815260408083206001600160a01b0387168452825280832085845290915290206112ab8282611808565b5081836001600160a01b0316306001600160a01b03167f28710dfecab43d1e29e02aa56b2e1e610c0bae19135c9cf7a83a1adb6df96d85846040516112f091906113a3565b60405180910390a4505050565b6001600160a01b038116811461127357600080fd5b60008060006060848603121561132757600080fd5b8335611332816112fd565b92506020840135611342816112fd565b929592945050506040919091013590565b60005b8381101561136e578181015183820152602001611356565b50506000910152565b6000815180845261138f816020860160208601611353565b601f01601f19169290920160200192915050565b602081526000610b446020830184611377565b6000602082840312156113c857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561140e5761140e6113cf565b604052919050565b600067ffffffffffffffff821115611430576114306113cf565b50601f01601f191660200190565b600082601f83011261144f57600080fd5b813561146261145d82611416565b6113e5565b81815284602083860101111561147757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156114a957600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156114ce57600080fd5b6114da8682870161143e565b9150509250925092565b600080604083850312156114f757600080fd5b50508035926020909101359150565b60008060006060848603121561151b57600080fd5b8335611526816112fd565b95602085013595506040909401359392505050565b6000806000806080858703121561155157600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561157d57600080fd5b6115898782880161143e565b91505092959194509250565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561162d578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180516001600160a01b031684528781015188850152860151606087850181905261161981860183611377565b9689019694505050908601906001016115bc565b509098975050505050505050565b60006020828403121561164d57600080fd5b815167ffffffffffffffff81111561166457600080fd5b8201601f8101841361167557600080fd5b805161168361145d82611416565b81815285602083850101111561169857600080fd5b611077826020830160208601611353565b600181811c908216806116bd57607f821691505b6020821081036116dd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156116f557600080fd5b815161042c816112fd565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81811683821601908082111561173757611737611700565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60008261177157634e487b7160e01b600052601260045260246000fd5b500690565b6000600019820361178957611789611700565b5060010190565b6000602082840312156117a257600080fd5b815167ffffffffffffffff8116811461042c57600080fd5b601f82111561127057600081815260208120601f850160051c810160208610156117e15750805b601f850160051c820191505b81811015611800578281556001016117ed565b505050505050565b815167ffffffffffffffff811115611822576118226113cf565b6118368161183084546116a9565b846117ba565b602080601f83116001811461186b57600084156118535750858301515b600019600386901b1c1916600185901b178555611800565b600085815260208120601f198616915b8281101561189a5788860151825594840194600190910190840161187b565b50858210156118b85787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212208f4b53c1094cf9eb4ce9336d34d8c045a314da8c6932cdb096c5d0f4077f676064736f6c63430008110033",
  "devdoc": {
    "events": {
      "AttestationCreated(address,address,bytes32,bytes)": {
        "params": {
          "about": "Address attestation is about.",
          "creator": "Address that made the attestation.",
          "key": "Key of the attestation.",
          "val": "Value of the attestation."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AttestationCreated(address,address,bytes32,bytes)": {
        "notice": "Emitted when Attestation is created."
      }
    },
    "kind": "user",
    "methods": {
      "attestations(address,address,bytes32)": {
        "notice": "Maps addresses to attestations. Creator => About => Key => Value."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4753,
        "contract": "contracts/attestation/OptiDomainsAttestation.sol:OptiDomainsAttestation",
        "label": "attestationActivated",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4762,
        "contract": "contracts/attestation/OptiDomainsAttestation.sol:OptiDomainsAttestation",
        "label": "attestations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bytes32,t_bytes_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bytes32,t_bytes_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(bytes32 => bytes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bytes32,t_bytes_storage))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      }
    }
  }
}