{
  "address": "0x672dB146c07d7EE7E7E8690F78a201F27c22cE2C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapperRegistry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__InvalidInitializationParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__RemoveTargetNotZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__ReplaceTargetIsIdentical",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorIsImmutable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__TargetHasNoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDiamondOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proxy__ImplementationIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeOwnable__NotNomineeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "CloneDiamondResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondReadable.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        }
      ],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallback",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "isApprovedFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodehash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicallWithNodeCheck",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "recordVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract INameWrapperRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "interfaceId",
          "type": "bytes4[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setMultiSupportsInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setSupportsInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaf9d43b0baf7e62a9f2d5a25bcb59d8e2a074feaf13573166cc875553d72b164",
  "receipt": {
    "to": null,
    "from": "0x000000187c72ee4a4120a3E626425595a34F185B",
    "contractAddress": "0x672dB146c07d7EE7E7E8690F78a201F27c22cE2C",
    "transactionIndex": 1,
    "gasUsed": "4250301",
    "logsBloom": "0x
    "blockHash": "0x5a6c1a5fe38180f1dee9fc1538631681970681ae01ecf7c448a00c98c281d173",
    "transactionHash": "0xaf9d43b0baf7e62a9f2d5a25bcb59d8e2a074feaf13573166cc875553d72b164",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8868418,
        "transactionHash": "0xaf9d43b0baf7e62a9f2d5a25bcb59d8e2a074feaf13573166cc875553d72b164",
        "address": "0x672dB146c07d7EE7E7E8690F78a201F27c22cE2C",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000672db146c07d7ee7e7e8690f78a201f27c22ce2c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000d2c408059000000000000000000000000000000000000000000000000000000009142376500000000000000000000000000000000000000000000000000000000dc9cc645000000000000000000000000000000000000000000000000000000001f931c1c000000000000000000000000000000000000000000000000000000007a0ed62700000000000000000000000000000000000000000000000000000000adfca15e0000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000cdffacc60000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000008da5cb5b000000000000000000000000000000000000000000000000000000008ab5150a00000000000000000000000000000000000000000000000000000000f2fde38b0000000000000000000000000000000000000000000000000000000079ba5097000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x5a6c1a5fe38180f1dee9fc1538631681970681ae01ecf7c448a00c98c281d173"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 8868418,
        "transactionHash": "0xaf9d43b0baf7e62a9f2d5a25bcb59d8e2a074feaf13573166cc875553d72b164",
        "address": "0x672dB146c07d7EE7E7E8690F78a201F27c22cE2C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000000000187c72ee4a4120a3e626425595a34f185b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5a6c1a5fe38180f1dee9fc1538631681970681ae01ecf7c448a00c98c281d173"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 8868418,
        "transactionHash": "0xaf9d43b0baf7e62a9f2d5a25bcb59d8e2a074feaf13573166cc875553d72b164",
        "address": "0x672dB146c07d7EE7E7E8690F78a201F27c22cE2C",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000672db146c07d7ee7e7e8690f78a201f27c22ce2c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000087b10399900000000000000000000000000000000000000000000000000000000a22cb46500000000000000000000000000000000000000000000000000000000e985e9c500000000000000000000000000000000000000000000000000000000a4b91a0100000000000000000000000000000000000000000000000000000000a9784b3e00000000000000000000000000000000000000000000000000000000d700ff33000000000000000000000000000000000000000000000000000000003603d7580000000000000000000000000000000000000000000000000000000009ed4607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x5a6c1a5fe38180f1dee9fc1538631681970681ae01ecf7c448a00c98c281d173"
      }
    ],
    "blockNumber": 8868418,
    "cumulativeGasUsed": "4300778",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x000000187c72ee4a4120a3E626425595a34F185B",
    "0x74070dBcf0F68fa1F73092642CD9275Df52C1DD2"
  ],
  "numDeployments": 1,
  "solcInputHash": "016796894504856f5784c3456a738903",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapperRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DiamondWritable__InvalidInitializationParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__RemoveTargetNotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__ReplaceTargetIsIdentical\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__TargetHasNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDiamondOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proxy__ImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeOwnable__NotNomineeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"CloneDiamondResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract INameWrapperRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"interfaceId\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMultiSupportsInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSupportsInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(bytes32,address,bool)\":{\"details\":\"Approve a delegate to be able to updated records on a node.\"},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization function call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional target of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"getFallbackAddress()\":{\"returns\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"isApprovedFor(address,bytes32,address)\":{\"details\":\"Check to see if the delegate has been approved by the owner for the node.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"returns\":{\"_0\":\"contract owner\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setFallbackAddress(address)\":{\"params\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"clone()\":{\"notice\":\"Clone DiamondResolver to customize your own resolver\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update diamond facets and optionally execute arbitrary initialization function\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"getFallbackAddress()\":{\"notice\":\"query the address of the fallback implementation\"},\"nomineeOwner()\":{\"notice\":\"get the nominated owner who has permission to call acceptOwnership\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"setFallbackAddress(address)\":{\"notice\":\"set the address of the fallback implementation\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond-resolver/DiamondResolver.sol\":\"DiamondResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2499},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title Semver\\n * @notice Semver is a simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    /**\\n     * @notice Contract version number (major).\\n     */\\n    uint256 private immutable MAJOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (minor).\\n     */\\n    uint256 private immutable MINOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (patch).\\n     */\\n    uint256 private immutable PATCH_VERSION;\\n\\n    /**\\n     * @param _major Version number (major).\\n     * @param _minor Version number (minor).\\n     * @param _patch Version number (patch).\\n     */\\n    constructor(\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) {\\n        MAJOR_VERSION = _major;\\n        MINOR_VERSION = _minor;\\n        PATCH_VERSION = _patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(MAJOR_VERSION),\\n                    \\\".\\\",\\n                    Strings.toString(MINOR_VERSION),\\n                    \\\".\\\",\\n                    Strings.toString(PATCH_VERSION)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x400059d3edb9efc9c23e6fbc18de6710f9235a4ffba4ab23bdb9f825273f093b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface IOwnable is IOwnableInternal, IERC173 {}\\n\",\"keccak256\":\"0xee77272fcf35108e2103ebb4f5d68d46844c447d9d2e411f8f9136298ae1bc2c\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\n\\ninterface ISafeOwnable is ISafeOwnableInternal, IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xfb9a7920498ab2bb3d493c292c40223eb3a6631431ea381ca39274b165c60102\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\",\"keccak256\":\"0xd5d44576a2f82b4ffdcf29feec6043e82436011784d92567a968609aa49a0f6b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x84d5694ad1f6cc77170ec667b02080dca1ccdde26eddaf46960d95971df1a5f1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        _setOwner(msg.sender);\\n        delete SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().nomineeOwner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x37c50898938e52163f6d42d6e03e845a131013c7bbbc90e5dc6c26dd89782e39\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4818afb0b39e0770f881cbeaea1b1c77fba0daaa64bd8c1361d6e3a197628e93\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return contract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0xf1c1fbf0ec82110c29d549db1fbd8ec728ba0b995dc5f087e0a5464243135dce\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal virtual {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xad163d89454d9c8a018880253c5be156ee0f847f05a392a12b2a7061c7fa8682\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x2a06657ce005059e60a0765fe090240732d910fc38de43ca8fd48804bb86c5e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4d6ba63d71b8cddb57746d564cc904931d1ee479052a19f902787417ee5d97a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x541fe148acc6b9331149498d6f66308761a650da10c9bd8f9e933bdfec52f730\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\",\"keccak256\":\"0x6712d6c7bee937ac07ee00eeaa30895634fbd3cda7f5b5c179a2331ad05623df\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n// TODO: DiamondFallback interface\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x22b541ba05979a4decc7c2f191aac3d873e44171fd1c3cbcca55e45651eaf024\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from '../base/IDiamondBase.sol';\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\",\"keccak256\":\"0x1b52280562511510101b03ea1c73d64645770582ba72aad8bb1633ccc8ae6d42\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x03fd06c9bd8642a42ece1d9f75c9e99869a06f4310fa9fe80df924ff68984036\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\",\"keccak256\":\"0xe3536079514a210e74f6e93b62525d451ed75c50c82773f9574c24e886ebe1ed\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0xf481debe21720da2aa6a26492a57469b3592da44867935bc432f9ac8ffcdddd2\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bc52044616cc2058d15aa07455f9ab4a2d6b0cb4bd542d6b5b8df092b501387\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d7dd0fa5d4cef8889d507880fe68d0b1558f6c21c5855170c44ef7e2b05bcef\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x82e0eeb28c8b8bd1ee9c5dd3247fa3d4062d5c6d43061833714c88741ecb5605\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/attestation/AttestationStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport { Semver } from \\\"@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AttestationStation\\r\\n * @author Optimism Collective\\r\\n * @author Gitcoin\\r\\n * @notice Where attestations live.\\r\\n */\\r\\ncontract AttestationStation is Semver {\\r\\n    /**\\r\\n     * @notice Struct representing data that is being attested.\\r\\n     *\\r\\n     * @custom:field about Address for which the attestation is about.\\r\\n     * @custom:field key   A bytes32 key for the attestation.\\r\\n     * @custom:field val   The attestation as arbitrary bytes.\\r\\n     */\\r\\n    struct AttestationData {\\r\\n        address about;\\r\\n        bytes32 key;\\r\\n        bytes val;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\\r\\n     */\\r\\n    mapping(address => mapping(address => mapping(bytes32 => bytes))) public attestations;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Attestation is created.\\r\\n     *\\r\\n     * @param creator Address that made the attestation.\\r\\n     * @param about   Address attestation is about.\\r\\n     * @param key     Key of the attestation.\\r\\n     * @param val     Value of the attestation.\\r\\n     */\\r\\n    event AttestationCreated(\\r\\n        address indexed creator,\\r\\n        address indexed about,\\r\\n        bytes32 indexed key,\\r\\n        bytes val\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @custom:semver 1.1.0\\r\\n     */\\r\\n    constructor() Semver(1, 1, 0) {}\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to create an attestation.\\r\\n     *\\r\\n     * @param _about Address that the attestation is about.\\r\\n     * @param _key   A key used to namespace the attestation.\\r\\n     * @param _val   An arbitrary value stored as part of the attestation.\\r\\n     */\\r\\n    function attest(\\r\\n        address _about,\\r\\n        bytes32 _key,\\r\\n        bytes memory _val\\r\\n    ) public {\\r\\n        attestations[msg.sender][_about][_key] = _val;\\r\\n\\r\\n        emit AttestationCreated(msg.sender, _about, _key, _val);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to create attestations.\\r\\n     *\\r\\n     * @param _attestations An array of attestation data.\\r\\n     */\\r\\n    function attest(AttestationData[] calldata _attestations) external {\\r\\n        uint256 length = _attestations.length;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            AttestationData memory attestation = _attestations[i];\\r\\n\\r\\n            attest(attestation.about, attestation.key, attestation.val);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2b36eaa050d38a152b9fa7195cc5105ec9b9693482766e50eba3e0dd0106393a\",\"license\":\"MIT\"},\"contracts/attestation/OptiDomainsAttestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport {INameWrapperRegistry} from \\\"../diamond-resolver/INameWrapperRegistry.sol\\\";\\r\\nimport \\\"./AttestationStation.sol\\\";\\r\\n\\r\\nbytes32 constant VERSION_KEY = keccak256(\\\"optidomains.resolver.VersionStorage\\\");\\r\\n\\r\\nerror NotResolver(address caller, address resolver);\\r\\n\\r\\ncontract OptiDomainsAttestation {\\r\\n    INameWrapperRegistry public immutable registry;\\r\\n    AttestationStation public immutable attestationStation;\\r\\n    bool public attestationActivated;\\r\\n\\r\\n    // In case attestation is not created -> simulate it in this contract\\r\\n\\r\\n    /**\\r\\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\\r\\n     */\\r\\n    mapping(address => mapping(address => mapping(bytes32 => bytes)))\\r\\n        public attestations;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Attestation is created.\\r\\n     *\\r\\n     * @param creator Address that made the attestation.\\r\\n     * @param about   Address attestation is about.\\r\\n     * @param key     Key of the attestation.\\r\\n     * @param val     Value of the attestation.\\r\\n     */\\r\\n    event AttestationCreated(\\r\\n        address indexed creator,\\r\\n        address indexed about,\\r\\n        bytes32 indexed key,\\r\\n        bytes val\\r\\n    );\\r\\n\\r\\n    function _attestLocal(address _about, bytes32 _key, bytes memory _val) internal {\\r\\n        attestations[address(this)][_about][_key] = _val;\\r\\n        emit AttestationCreated(address(this), _about, _key, _val);\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) private view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size > 0);\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        INameWrapperRegistry _registry,\\r\\n        AttestationStation _attestationStation\\r\\n    ) {\\r\\n        registry = _registry;\\r\\n        attestationStation = _attestationStation;\\r\\n        attestationActivated = isContract(address(_attestationStation));\\r\\n    }\\r\\n\\r\\n    function activate() public {\\r\\n        attestationActivated = isContract(address(attestationStation));\\r\\n    }\\r\\n\\r\\n    function _attest(AttestationStation.AttestationData[] memory _attestations) internal {\\r\\n        if (attestationActivated) {\\r\\n            attestationStation.attest(_attestations);\\r\\n        } else {\\r\\n            uint256 length = _attestations.length;\\r\\n            for (uint256 i = 0; i < length; ) {\\r\\n                AttestationStation.AttestationData memory attestation = _attestations[i];\\r\\n\\r\\n                _attestLocal(attestation.about, attestation.key, attestation.val);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _readAttestation(address creator, address about, bytes32 key) public view returns(bytes memory) {\\r\\n        if (attestationActivated) {\\r\\n            return attestationStation.attestations(creator, about, key);\\r\\n        } else {\\r\\n            return attestations[creator][about][key];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _readVersion(address owner, bytes32 node) internal view returns(uint64) {\\r\\n        bytes memory response = _readAttestation(address(this), owner, keccak256(abi.encodePacked(node, VERSION_KEY)));\\r\\n        if (response.length == 0) return 0;\\r\\n        return abi.decode(response, (uint64));\\r\\n    }\\r\\n\\r\\n    function readVersion(bytes32 node) public view returns(uint64) {\\r\\n        return _readVersion(registry.ownerOf(node), node);\\r\\n    }\\r\\n\\r\\n    function readAttestation(address creator, bytes32 node, bytes32 key) public view returns(bytes memory) {\\r\\n        address owner = registry.ownerOf(node);\\r\\n        uint64 version = _readVersion(owner, node);\\r\\n        return _readAttestation(creator, owner, keccak256(abi.encodePacked(node, key, version)));\\r\\n    }\\r\\n\\r\\n    function readAttestation(bytes32 node, bytes32 key) public view returns(bytes memory) {\\r\\n        return readAttestation(address(this), node, key);\\r\\n    }\\r\\n\\r\\n    function readAttestationNV(address creator, bytes32 node, bytes32 key) public view returns(bytes memory) {\\r\\n        address owner = registry.ownerOf(node);\\r\\n        return _readAttestation(creator, owner, keccak256(abi.encodePacked(node, key)));\\r\\n    }\\r\\n\\r\\n    // External attestor\\r\\n    function buildAttestationData(bytes32 node, bytes32 key, uint256 flags, bytes memory value) public view returns(AttestationStation.AttestationData[] memory att) {\\r\\n        address owner = registry.ownerOf(node);\\r\\n\\r\\n        require(flags > 0 && flags < 8, \\\"Invalid flags\\\");\\r\\n\\r\\n        bool useOwner = (flags & 1) > 0;\\r\\n        bool useVersion = (flags & 2) > 0;\\r\\n        bool useNodeOnly = (flags % 4) > 0;\\r\\n\\r\\n        uint256 length;\\r\\n\\r\\n        assembly {\\r\\n            // SAFETY: Simple bool-to-int cast.\\r\\n            length := add(add(useOwner, useVersion), useNodeOnly)\\r\\n        }\\r\\n        \\r\\n        att = new AttestationStation.AttestationData[](length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n\\r\\n        if (useOwner) {\\r\\n            att[i++] = AttestationStation.AttestationData({\\r\\n                about: owner,\\r\\n                key: keccak256(abi.encodePacked(node, key)),\\r\\n                val: value\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (useVersion) {\\r\\n            uint64 version = _readVersion(owner, node);\\r\\n\\r\\n            att[i++] = AttestationStation.AttestationData({\\r\\n                about: owner,\\r\\n                key: keccak256(abi.encodePacked(node, key, version)),\\r\\n                val: value\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (useNodeOnly) {\\r\\n            att[i++] = AttestationStation.AttestationData({\\r\\n                about: address(0),\\r\\n                key: keccak256(abi.encodePacked(node, key)),\\r\\n                val: value\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Attest by resolver\\r\\n    function attest(bytes32 node, bytes32 key, bytes memory value) public {\\r\\n        address resolver = registry.ens().resolver(node);\\r\\n        if (msg.sender != resolver) {\\r\\n            revert NotResolver(msg.sender, resolver);\\r\\n        }\\r\\n\\r\\n        address owner = registry.ownerOf(node);\\r\\n        uint64 version = _readVersion(owner, node);\\r\\n\\r\\n        // AttestationStation.AttestationData[] memory att = buildAttestationData(node, key, 3, value);\\r\\n\\r\\n        AttestationStation.AttestationData[] memory att = new AttestationStation.AttestationData[](2);\\r\\n        \\r\\n        att[0] = AttestationStation.AttestationData({\\r\\n            about: owner,\\r\\n            key: keccak256(abi.encodePacked(node, key)),\\r\\n            val: value\\r\\n        });\\r\\n\\r\\n        att[1] = AttestationStation.AttestationData({\\r\\n            about: owner,\\r\\n            key: keccak256(abi.encodePacked(node, key, version)),\\r\\n            val: value\\r\\n        });\\r\\n\\r\\n        _attest(att);\\r\\n    }\\r\\n\\r\\n    // Increase version by resolver\\r\\n    function increaseVersion(bytes32 node) public {\\r\\n        address resolver = registry.ens().resolver(node);\\r\\n        if (msg.sender != resolver) {\\r\\n            revert NotResolver(msg.sender, resolver);\\r\\n        }\\r\\n\\r\\n        address owner = registry.ownerOf(node);\\r\\n        uint64 version = _readVersion(owner, node);\\r\\n\\r\\n        AttestationStation.AttestationData[] memory att = new AttestationStation.AttestationData[](1);\\r\\n        \\r\\n        att[0] = AttestationStation.AttestationData({\\r\\n            about: owner,\\r\\n            key: keccak256(abi.encodePacked(node, VERSION_KEY)),\\r\\n            val: abi.encode(version + 1)\\r\\n        });\\r\\n\\r\\n        _attest(att);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8c008cb86b26aed9e2cb69603356610ab7135a22cebc04a0afdcc24613ad0b90\",\"license\":\"MIT\"},\"contracts/diamond-resolver/DiamondBaseExtendable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport { OwnableInternal } from '@solidstate/contracts/access/ownable/OwnableInternal.sol';\\r\\nimport { DiamondBaseStorage } from '@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol';\\r\\nimport { IDiamondFallback } from '@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol';\\r\\nimport { Proxy } from '@solidstate/contracts/proxy/Proxy.sol';\\r\\n\\r\\ninterface IDiamondBaseExtendable is IDiamondFallback {\\r\\n    function getImplementation(bytes4 sig) external view returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\r\\n */\\r\\nabstract contract DiamondBaseExtendable is\\r\\n    IDiamondBaseExtendable,\\r\\n    Proxy,\\r\\n    OwnableInternal\\r\\n{\\r\\n    /**\\r\\n     * @inheritdoc IDiamondFallback\\r\\n     */\\r\\n    function getFallbackAddress()\\r\\n        external\\r\\n        view\\r\\n        returns (address fallbackAddress)\\r\\n    {\\r\\n        fallbackAddress = _getFallbackAddress();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IDiamondFallback\\r\\n     */\\r\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\r\\n        _setFallbackAddress(fallbackAddress);\\r\\n    }\\r\\n\\r\\n    function _getImplementation()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address implementation)\\r\\n    {\\r\\n        implementation = getImplementation(msg.sig);\\r\\n    }\\r\\n\\r\\n    function getImplementation(bytes4 sig) public view virtual returns (address implementation) {\\r\\n        // inline storage layout retrieval uses less gas\\r\\n        DiamondBaseStorage.Layout storage l;\\r\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n\\r\\n        implementation = address(bytes20(l.facets[sig]));\\r\\n\\r\\n        if (implementation == address(0)) {\\r\\n            implementation = _getFallbackAddress();\\r\\n            if (implementation != address(0)) {\\r\\n                implementation = IDiamondBaseExtendable(payable(implementation)).getImplementation(sig);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice query the address of the fallback implementation\\r\\n     * @return fallbackAddress address of fallback implementation\\r\\n     */\\r\\n    function _getFallbackAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address fallbackAddress)\\r\\n    {\\r\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set the address of the fallback implementation\\r\\n     * @param fallbackAddress address of fallback implementation\\r\\n     */\\r\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\r\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xba3158b4486c93c2b057e8f76e3c34aade05b232fce35b5da2eb7a7f09056185\",\"license\":\"MIT\"},\"contracts/diamond-resolver/DiamondResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport \\\"./SolidStateDiamond.sol\\\";\\r\\nimport \\\"./Multicallable.sol\\\";\\r\\nimport \\\"./IDiamondResolver.sol\\\";\\r\\nimport \\\"./facets/base/IDiamondResolverBase.sol\\\";\\r\\nimport \\\"./facets/base/DiamondResolverBase.sol\\\";\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./INameWrapperRegistry.sol\\\";\\r\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\r\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\r\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\nbytes4 constant supportsInterfaceSignature = 0x01ffc9a7;\\r\\n\\r\\ncontract DiamondResolver is \\r\\n    SolidStateDiamond,\\r\\n    Multicallable,\\r\\n    DiamondResolverBase\\r\\n{\\r\\n    bytes32 constant ADDR_REVERSE_NODE =\\r\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\r\\n\\r\\n    INameWrapperRegistry public immutable registry;\\r\\n\\r\\n    constructor(address _owner, INameWrapperRegistry _registry) SolidStateDiamond(_owner) {\\r\\n        registry = _registry;\\r\\n    }\\r\\n\\r\\n    function initialize(address _owner, address _fallback) public virtual override {\\r\\n        super.initialize(_owner, _fallback);\\r\\n\\r\\n        if (_fallback == address(0)) {\\r\\n            bytes4[] memory selectors = new bytes4[](8);\\r\\n            uint256 selectorIndex;\\r\\n\\r\\n            // register DiamondResolverBase\\r\\n\\r\\n            selectors[selectorIndex++] = IHasNameWrapperRegistry.registry.selector;\\r\\n            selectors[selectorIndex++] = IDiamondResolverBase.setApprovalForAll.selector;\\r\\n            selectors[selectorIndex++] = IDiamondResolverBase.isApprovedForAll.selector;\\r\\n            selectors[selectorIndex++] = IDiamondResolverBase.approve.selector;\\r\\n            selectors[selectorIndex++] = IDiamondResolverBase.isApprovedFor.selector;\\r\\n            selectors[selectorIndex++] = IVersionableResolver.recordVersions.selector;\\r\\n            selectors[selectorIndex++] = IVersionableResolver.clearRecords.selector;\\r\\n            selectors[selectorIndex++] = IDiamondResolverFactory.clone.selector;\\r\\n\\r\\n            // diamond cut\\r\\n\\r\\n            FacetCut[] memory facetCuts = new FacetCut[](1);\\r\\n\\r\\n            facetCuts[0] = FacetCut({\\r\\n                target: address(this),\\r\\n                action: FacetCutAction.ADD,\\r\\n                selectors: selectors\\r\\n            });\\r\\n\\r\\n            _diamondCut(facetCuts, address(0), '');\\r\\n        }\\r\\n\\r\\n        _setSupportsInterface(type(IDiamondResolver).interfaceId, true);\\r\\n        _setSupportsInterface(type(IVersionableResolver).interfaceId, true);\\r\\n        _setSupportsInterface(type(IHasNameWrapperRegistry).interfaceId, true);\\r\\n        _setSupportsInterface(type(IDiamondResolverFactory).interfaceId, true);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(Multicallable, SolidStateDiamond)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return SolidStateDiamond.supportsInterface(interfaceID) || Multicallable.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6de3f3ff28bbffe98bfb36265743a387cc319031b9421427b30e3e73a39e2efd\",\"license\":\"MIT\"},\"contracts/diamond-resolver/IDiamondResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport \\\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\\\";\\r\\nimport \\\"./IMulticallable.sol\\\";\\r\\nimport \\\"./INameWrapperRegistry.sol\\\";\\r\\n\\r\\ninterface IDiamondResolver is ISolidStateDiamond, IMulticallable {\\r\\n  function registry() external view returns(INameWrapperRegistry);\\r\\n}\",\"keccak256\":\"0x8aee512adf069cab2be1a48e196cbc8b12907b82ddf999afe2d330828bc69ffb\",\"license\":\"MIT\"},\"contracts/diamond-resolver/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/diamond-resolver/INameWrapperRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\r\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\ninterface INameWrapperRegistry {\\r\\n  function ens() external view returns(ENS);\\r\\n  function attestation() external view returns(address);\\r\\n  function forward(INameWrapper wrapper) external view returns(INameWrapper);\\r\\n  function backward(INameWrapper wrapper) external view returns(INameWrapper);\\r\\n  function isNameWrapper(address wrapper) external view returns(bool);\\r\\n  function ownerOf(bytes32 node) external view returns(address);\\r\\n\\r\\n  function upgrade(INameWrapper _old, INameWrapper _new) external;\\r\\n  function setAttestation(address _attestation) external;\\r\\n}\\r\\n\\r\\ninterface IHasNameWrapperRegistry {\\r\\n  function registry() external view returns(INameWrapperRegistry);\\r\\n}\",\"keccak256\":\"0x5aad060ec47d9b97c9bda699f787b4644aa457a48f4fb2afa333e0b9a297e262\",\"license\":\"MIT\"},\"contracts/diamond-resolver/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"@solidstate/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, IERC165 {\\n    function _multicall(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(\\n                    txNamehash == nodehash,\\n                    \\\"multicall: All records must have a matching namehash\\\"\\n                );\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as EthRegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override(IERC165) returns (bool) {\\n        return interfaceID == type(IMulticallable).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xce4e0186743662da905da066b07af1d96e701208d10db909271e0d4d1b5fe5b4\",\"license\":\"MIT\"},\"contracts/diamond-resolver/SolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport { IOwnable, Ownable, OwnableInternal } from '@solidstate/contracts/access/ownable/Ownable.sol';\\r\\nimport { ISafeOwnable, SafeOwnable } from '@solidstate/contracts/access/ownable/SafeOwnable.sol';\\r\\nimport { IERC173 } from '@solidstate/contracts/interfaces/IERC173.sol';\\r\\nimport { DiamondBase } from '@solidstate/contracts/proxy/diamond/base/DiamondBase.sol';\\r\\nimport { DiamondFallback, IDiamondFallback } from '@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol';\\r\\nimport { DiamondReadable, IDiamondReadable } from '@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol';\\r\\nimport { DiamondWritable, IDiamondWritable } from '@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol';\\r\\nimport { ISolidStateDiamond, IERC165 } from '@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol';\\r\\nimport { ERC165BaseInternal } from \\\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\\\";\\r\\nimport \\\"./DiamondBaseExtendable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation\\r\\n * Overrided to fix non-virtual function in ERC165Base implementation\\r\\n */\\r\\nabstract contract SolidStateDiamond is\\r\\n    ISolidStateDiamond,\\r\\n    DiamondBaseExtendable,\\r\\n    DiamondReadable,\\r\\n    DiamondWritable,\\r\\n    SafeOwnable,\\r\\n    ERC165BaseInternal\\r\\n{\\r\\n    constructor(address _owner) {\\r\\n        initialize(_owner, address(0));\\r\\n    }\\r\\n\\r\\n    struct Initialization {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function initialize(address _owner, address _fallback) public virtual {\\r\\n        Initialization storage initialization;\\r\\n        bytes32 slot = keccak256(\\\"optidomains.contracts.initialization\\\");\\r\\n        assembly {\\r\\n            initialization.slot := slot\\r\\n        }\\r\\n\\r\\n        require(!initialization.initialized, \\\"Initialized\\\");\\r\\n\\r\\n        if (_fallback == address(0)) {\\r\\n            bytes4[] memory selectors = new bytes4[](13);\\r\\n            uint256 selectorIndex;\\r\\n\\r\\n            // register DiamondFallback\\r\\n\\r\\n            selectors[selectorIndex++] = IDiamondFallback\\r\\n                .getFallbackAddress\\r\\n                .selector;\\r\\n            selectors[selectorIndex++] = IDiamondFallback\\r\\n                .setFallbackAddress\\r\\n                .selector;\\r\\n            selectors[selectorIndex++] = IDiamondBaseExtendable\\r\\n                .getImplementation\\r\\n                .selector;\\r\\n\\r\\n            // register DiamondWritable\\r\\n\\r\\n            selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\r\\n\\r\\n            // register DiamondReadable\\r\\n\\r\\n            selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\r\\n            selectors[selectorIndex++] = IDiamondReadable\\r\\n                .facetFunctionSelectors\\r\\n                .selector;\\r\\n            selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\r\\n            selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\r\\n\\r\\n            // register ERC165\\r\\n\\r\\n            selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\r\\n\\r\\n            // register SafeOwnable\\r\\n\\r\\n            selectors[selectorIndex++] = Ownable.owner.selector;\\r\\n            selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\r\\n            selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\r\\n            selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\r\\n\\r\\n            // diamond cut\\r\\n\\r\\n            FacetCut[] memory facetCuts = new FacetCut[](1);\\r\\n\\r\\n            facetCuts[0] = FacetCut({\\r\\n                target: address(this),\\r\\n                action: FacetCutAction.ADD,\\r\\n                selectors: selectors\\r\\n            });\\r\\n\\r\\n            _diamondCut(facetCuts, address(0), '');\\r\\n        } else {\\r\\n            _setFallbackAddress(_fallback);\\r\\n        }\\r\\n\\r\\n        _setSupportsInterface(type(IDiamondBaseExtendable).interfaceId, true);\\r\\n        _setSupportsInterface(type(IDiamondFallback).interfaceId, true);\\r\\n        _setSupportsInterface(type(IDiamondWritable).interfaceId, true);\\r\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\r\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\r\\n        _setSupportsInterface(type(IERC173).interfaceId, true);\\r\\n\\r\\n        // set owner\\r\\n\\r\\n        _setOwner(_owner);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _transferOwnership(\\r\\n        address account\\r\\n    ) internal virtual override(OwnableInternal, SafeOwnable) {\\r\\n        super._transferOwnership(account);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override(IERC165) returns (bool result) {\\r\\n        result = _supportsInterface(interfaceID);\\r\\n        if (!result) {\\r\\n            address fallbackAddress = _getFallbackAddress();\\r\\n            if (fallbackAddress != address(0)) {\\r\\n                result = result || IERC165(fallbackAddress).supportsInterface(interfaceID);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe023a5771f661c502a17de4f1f8ab8404b24c60e88b72936c098db811c1f1b6f\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport {ERC165BaseInternal} from \\\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\\\";\\r\\nimport \\\"./DiamondResolverBaseInternal.sol\\\";\\r\\nimport \\\"./DiamondResolverFactory.sol\\\";\\r\\nimport \\\"./IDiamondResolverBase.sol\\\";\\r\\n\\r\\nabstract contract DiamondResolverBase is\\r\\n    IDiamondResolverBase,\\r\\n    DiamondResolverBaseInternal,\\r\\n    DiamondResolverFactory,\\r\\n    ERC165BaseInternal\\r\\n{\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public {\\r\\n        _setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) public view returns (bool) {\\r\\n        return _isApprovedForAll(account, operator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve a delegate to be able to updated records on a node.\\r\\n     */\\r\\n    function approve(bytes32 node, address delegate, bool approved) public {\\r\\n        _approve(node, delegate, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check to see if the delegate has been approved by the owner for the node.\\r\\n     */\\r\\n    function isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) public view returns (bool) {\\r\\n        return _isApprovedFor(owner, node, delegate);\\r\\n    }\\r\\n\\r\\n    function recordVersions(bytes32 node) public view returns (uint64) {\\r\\n        return _recordVersions(node);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\r\\n        _clearRecords(node);\\r\\n    }\\r\\n\\r\\n    function setSupportsInterface(bytes4 interfaceId, bool status) public baseOnlyOwner {\\r\\n        _setSupportsInterface(interfaceId, status);\\r\\n    }\\r\\n\\r\\n    function setMultiSupportsInterface(bytes4[] memory interfaceId, bool status) public baseOnlyOwner {\\r\\n        unchecked {\\r\\n            uint length = interfaceId.length;\\r\\n            for (uint i; i < length; ++i) {\\r\\n                _setSupportsInterface(interfaceId[i], status);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5915e02b9c4e0a9c786b5d4d71950f2a4ec3d36a5993cee976982c3b313b4c18\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverBaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./DiamondResolverBaseStorage.sol\\\";\\r\\nimport \\\"./DiamondResolverUtil.sol\\\";\\r\\n\\r\\nerror ERC165Base__InvalidInterfaceId();\\r\\n\\r\\nabstract contract DiamondResolverBaseInternal is DiamondResolverUtil {\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    // Logged when a delegate is approved or an approval is revoked.\\r\\n    event Approved(\\r\\n        address owner,\\r\\n        bytes32 indexed node,\\r\\n        address indexed delegate,\\r\\n        bool indexed approved\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function _setApprovalForAll(address operator, bool approved) internal {\\r\\n        require(\\r\\n            msg.sender != operator,\\r\\n            \\\"ERC1155: setting approval status for self\\\"\\r\\n        );\\r\\n\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.operatorApprovals[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve a delegate to be able to updated records on a node.\\r\\n     */\\r\\n    function _approve(bytes32 node, address delegate, bool approved) internal {\\r\\n        require(msg.sender != delegate, \\\"Setting delegate status for self\\\");\\r\\n\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.tokenApprovals[msg.sender][node][delegate] = approved;\\r\\n        emit Approved(msg.sender, node, delegate, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function _isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) internal view returns (bool) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        return l.operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check to see if the delegate has been approved by the owner for the node.\\r\\n     */\\r\\n    function _isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) internal view returns (bool) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        return l.tokenApprovals[owner][node][delegate];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd80a327d2864a32a7d5615d561cf55792a6510c324c7e8efea968e0e2f3f2a2c\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"../../../registry/ENS.sol\\\";\\r\\nimport {INameWrapper} from \\\"../../../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev derived from PublicResolver (MIT license)\\r\\n */\\r\\nlibrary DiamondResolverBaseStorage {\\r\\n    struct Layout {\\r\\n        /**\\r\\n         * A mapping of operators. An address that is authorised for an address\\r\\n         * may make any changes to the name that the owner could, but may not update\\r\\n         * the set of authorisations.\\r\\n         * (owner, operator) => approved\\r\\n         */\\r\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\r\\n\\r\\n        /**\\r\\n         * A mapping of delegates. A delegate that is authorised by an owner\\r\\n         * for a name may make changes to the name's resolver, but may not update\\r\\n         * the set of token approvals.\\r\\n         * (owner, name, delegate) => approved\\r\\n         */\\r\\n        mapping(address => mapping(bytes32 => mapping(address => bool))) tokenApprovals;\\r\\n\\r\\n        mapping(bytes32 => uint64) recordVersions;\\r\\n\\r\\n        mapping(address => bool) supportsInterface;\\r\\n    }\\r\\n\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256('optidomains.contracts.storage.DiamondResolverStorage');\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x824bfd453c0f83c8aa0470467024e46838a8b73d9b8c0755a1cc45b7a215770b\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./IDiamondResolverFactory.sol\\\";\\r\\n\\r\\ninterface IDiamondResolverInitialize {\\r\\n    function initialize(address _owner, address _fallback) external;\\r\\n}\\r\\n\\r\\ncontract DiamondResolverFactory is IDiamondResolverFactory {\\r\\n    event CloneDiamondResolver(address indexed cloner, address indexed resolver);\\r\\n\\r\\n    /**\\r\\n     * Clone DiamondResolver to customize your own resolver\\r\\n     */\\r\\n    function clone() public {\\r\\n        address newResolver = Clones.clone(address(this));\\r\\n        IDiamondResolverInitialize(newResolver).initialize(msg.sender, address(this));\\r\\n        emit CloneDiamondResolver(msg.sender, newResolver);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x5ea1b12cb15003a02d73fb9444a8491097196190d5dc82476c35c34730562b7f\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport {OwnableStorage} from \\\"@solidstate/contracts/access/ownable/OwnableStorage.sol\\\";\\r\\nimport \\\"./DiamondResolverBaseStorage.sol\\\";\\r\\nimport \\\"./IVersionableResolver.sol\\\";\\r\\nimport \\\"../../INameWrapperRegistry.sol\\\";\\r\\nimport \\\"../../../attestation/OptiDomainsAttestation.sol\\\";\\r\\n\\r\\nerror NotDiamondOwner();\\r\\n\\r\\nabstract contract DiamondResolverUtil {\\r\\n    error Unauthorised();\\r\\n\\r\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\r\\n\\r\\n    modifier baseOnlyOwner() {\\r\\n        if (msg.sender != OwnableStorage.layout().owner) revert NotDiamondOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _registry() internal view returns(INameWrapperRegistry) {\\r\\n        return IHasNameWrapperRegistry(address(this)).registry();\\r\\n    }\\r\\n\\r\\n    function _attestation() internal view returns(OptiDomainsAttestation) {\\r\\n        return OptiDomainsAttestation(_registry().attestation());\\r\\n    }\\r\\n\\r\\n    function _readAttestation(bytes32 node, bytes32 key) internal view returns(bytes memory) {\\r\\n        return _attestation().readAttestation(node, key);\\r\\n    }\\r\\n\\r\\n    function _attest(bytes32 node, bytes32 key, bytes memory value) internal {\\r\\n        _attestation().attest(node, key, value);\\r\\n    }\\r\\n\\r\\n    function _recordVersions(bytes32 node) internal view returns (uint64) {\\r\\n        return _attestation().readVersion(node);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function _clearRecords(bytes32 node) internal virtual {\\r\\n        _attestation().increaseVersion(node);\\r\\n        emit VersionChanged(node, _recordVersions(node));\\r\\n    }\\r\\n\\r\\n    function _isAuthorised(bytes32 node) internal view returns (bool) {\\r\\n        (bool success, bytes memory result) = address(this).staticcall(\\r\\n            abi.encodeWithSelector(0x25f36704, msg.sender, node)\\r\\n        );\\r\\n        if (!success) return false;\\r\\n        return abi.decode(result, (bool));\\r\\n    }\\r\\n\\r\\n    modifier authorised(bytes32 node) {\\r\\n        if (!_isAuthorised(node)) revert Unauthorised();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd17c32a756412d28a3dc6b2e27139438067eb2fd35b8de2280a2aef8e9e6a5b1\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/IDiamondResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./IVersionableResolver.sol\\\";\\r\\nimport {INameWrapper} from \\\"../../../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\ninterface IDiamondResolverBase is IVersionableResolver {\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function approve(bytes32 node, address delegate, bool approved) external;\\r\\n\\r\\n    function isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xd1394b443e567d47d009d4aa943a3fc1f099a6427ab9aa03ad183c3a09f21f82\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/IDiamondResolverFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\ninterface IDiamondResolverFactory {\\r\\n  function clone() external;\\r\\n}\",\"keccak256\":\"0x47f8688c724b01b244dbc61c52744a0e79ef1bd7e31e333a6481d600733c5617\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    // event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n    function clearRecords(bytes32 node) external;\\n}\\n\",\"keccak256\":\"0x63f6cd99d140ff213d2635b64708cbd3b49395bd6da66e68c3de37ba3c512b4b\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x9ac51351ff72d73083aed62b7cdad4c07e9d1eb68401d7fd8457bdd828f2c6fe\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620050a4380380620050a4833981016040819052620000349162001282565b816200004281600062000056565b506001600160a01b0316608052506200148e565b6200006d8282620003bf60201b620018351760201c565b6001600160a01b0381166200036b57604080516008808252610120820190925260009160208201610100803683370190505090506000637b10399960e01b8282620000b881620012c1565b935081518110620000cd57620000cd620012e9565b6001600160e01b03199092166020928302919091019091015263a22cb46560e01b8282620000fb81620012c1565b935081518110620001105762000110620012e9565b6001600160e01b03199092166020928302919091019091015263e985e9c560e01b82826200013e81620012c1565b935081518110620001535762000153620012e9565b6001600160e01b03199092166020928302919091019091015263a4b91a0160e01b82826200018181620012c1565b935081518110620001965762000196620012e9565b6001600160e01b0319909216602092830291909101909101526354bc259f60e11b8282620001c481620012c1565b935081518110620001d957620001d9620012e9565b6001600160e01b03199092166020928302919091019091015263d700ff3360e01b82826200020781620012c1565b9350815181106200021c576200021c620012e9565b6001600160e01b0319909216602092830291909101909101526306c07aeb60e31b82826200024a81620012c1565b9350815181106200025f576200025f620012e9565b6001600160e01b0319909216602092830291909101909101526309ed460760e01b82826200028d81620012c1565b935081518110620002a257620002a2620012e9565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620002d357905050604080516060810190915230815290915060208101600081526020018481525081600081518110620003395762000339620012e9565b602002602001018190525062000367816000604051806020016040528060008152506200090d60201b60201c565b5050505b6200037f637b10399960e01b600162000ae9565b6200039363e103286b60e01b600162000ae9565b620003a7637b10399960e01b600162000ae9565b620003bb6309ed460760e01b600162000ae9565b5050565b7fb40d49f5a32ade8065d600aab18d96945a09d7fbb3e248099e22f7c4c10e01898054819060ff1615620004275760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b604482015260640160405180910390fd5b6001600160a01b038316620008795760408051600d8082526101c08201909252600091602082016101a0803683370190505090506000632c40805960e01b82826200047281620012c1565b935081518110620004875762000487620012e9565b6001600160e01b031990921660209283029190910190910152639142376560e01b8282620004b581620012c1565b935081518110620004ca57620004ca620012e9565b6001600160e01b03199092166020928302919091019091015263dc9cc64560e01b8282620004f881620012c1565b9350815181106200050d576200050d620012e9565b6001600160e01b0319909216602092830291909101909101526307e4c70760e21b82826200053b81620012c1565b935081518110620005505762000550620012e9565b6001600160e01b031990921660209283029190910190910152637a0ed62760e01b82826200057e81620012c1565b935081518110620005935762000593620012e9565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620005c181620012c1565b935081518110620005d657620005d6620012e9565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b82826200060481620012c1565b935081518110620006195762000619620012e9565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b82826200064781620012c1565b9350815181106200065c576200065c620012e9565b6001600160e01b0319909216602092830291909101909101526301ffc9a760e01b82826200068a81620012c1565b9350815181106200069f576200069f620012e9565b6001600160e01b031990921660209283029190910190910152638da5cb5b60e01b8282620006cd81620012c1565b935081518110620006e257620006e2620012e9565b6001600160e01b03199092166020928302919091019091015263455a8a8560e11b82826200071081620012c1565b935081518110620007255762000725620012e9565b6001600160e01b03199092166020928302919091019091015263f2fde38b60e01b82826200075381620012c1565b935081518110620007685762000768620012e9565b6001600160e01b0319909216602092830291909101909101526379ba509760e01b82826200079681620012c1565b935081518110620007ab57620007ab620012e9565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620007dc57905050604080516060810190915230815290915060208101600081526020018481525081600081518110620008425762000842620012e9565b602002602001018190525062000870816000604051806020016040528060008152506200090d60201b60201c565b50505062000884565b620008848362000b5b565b6200089863dc9cc64560e01b600162000ae9565b620008ac632f40adcf60e21b600162000ae9565b620008c06307e4c70760e21b600162000ae9565b620008d46348e2b09360e01b600162000ae9565b620008e86301ffc9a760e01b600162000ae9565b620008fc6307f5828d60e41b600162000ae9565b620009078462000b95565b50505050565b60006200092462000c0960201b62001ee61760201c565b600181015490915061ffff811690819060009060071615620009585750600381901c60009081526002840160205260409020545b60005b875181101562000a575760008882815181106200097c576200097c620012e9565b60200260200101519050600081602001519050816040015151600003620009b65760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115620009cd57620009cd620012ff565b03620009ec57620009e18786868562000c2d565b909550935062000a4c565b600181600281111562000a035762000a03620012ff565b0362000a1b5762000a15878362000d8c565b62000a4c565b600281600281111562000a325762000a32620012ff565b0362000a4c5762000a468786868562000ef2565b90955093505b50506001016200095b565b5082821462000a745760018401805461ffff191661ffff84161790555b600782161562000a9757600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67387878760405162000acc9392919062001369565b60405180910390a162000ae086866200111e565b50505050505050565b6001600160e01b0319808316900362000b155760405163b0a19dd560e01b815260040160405180910390fd5b8062000b2b6200121b60201b62001f0a1760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b8062000b7162000c0960201b62001ee61760201c565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b600062000bac6200123f60201b62001f2e1760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b0316301480159062000c6d575062000c6b83600001516001600160a01b03166200126360201b620005f51760201c565b155b1562000c8c57604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101562000d7f5760008460400151828151811062000cb85762000cb8620012e9565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c1562000d0557604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781900362000d6f57600389901c600090815260028b0160205260408120989098555b5050506001958601950162000c8f565b5093959294509192505050565b62000daf81600001516001600160a01b03166200126360201b620005f51760201c565b62000dcd57604051633ddc5cab60e21b815260040160405180910390fd5b60005b81604001515181101562000eed5760008260400151828151811062000df95762000df9620012e9565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000e46576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b0382160362000e705760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b03160362000ea7576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000dd0565b505050565b805160009081906001600160a01b03161562000f2157604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b8560400151518110156200110a5760008660400151828151811062000f565762000f56620012e9565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000fa2576040516337e25a9760e11b815260040160405180910390fd5b30606082901c0362000fc75760405163e983573160e01b815260040160405180910390fd5b600089900362000ff557600019909401600081815260028c0160205260409020549850936007935062000ffd565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462001050576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b16878214620010b557600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055620010d9565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b86600003620010f857600088815260028f01602052604081208190559b505b50506001909301925062000f2d915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146200114b576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b03821615620003bb576001600160a01b0382163014620011a9576200118b826001600160a01b03166200126360201b620005f51760201c565b620011a957604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b031682604051620011c5919062001470565b600060405180830381855af49150503d806000811462001202576040519150601f19603f3d011682016040523d82523d6000602084013e62001207565b606091505b505090508062000eed573d6000803e3d6000fd5b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b3b151590565b6001600160a01b03811681146200127f57600080fd5b50565b600080604083850312156200129657600080fd5b8251620012a38162001269565b6020840151909250620012b68162001269565b809150509250929050565b600060018201620012e257634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b838110156200133257818101518382015260200162001318565b50506000910152565b600081518084526200135581602086016020860162001315565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200143e57898403607f19018652815180516001600160a01b03168552838101518986019060038110620013da57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620014285783516001600160e01b0319168252928601926001929092019190860190620013fc565b5097850197955050509082019060010162001392565b50506001600160a01b038a169088015286810360408801526200146281896200133b565b9a9950505050505050505050565b600082516200148481846020870162001315565b9190910192915050565b608051613bfa620014aa60003960006103a10152613bfa6000f3fe6080604052600436106101a55760003560e01c80638da5cb5b116100e1578063adfca15e1161008a578063dc9cc64511610064578063dc9cc64514610559578063e32954eb14610579578063e985e9c514610599578063f2fde38b146105b9576101ac565b8063adfca15e1461049a578063cdffacc6146104c7578063d700ff3314610520576101ac565b8063a4b91a01116100bb578063a4b91a011461042d578063a9784b3e1461044d578063ac9650d81461046d576101ac565b80638da5cb5b146103d857806391423765146103ed578063a22cb4651461040d576101ac565b806352ef6b2c1161014e57806379ba50971161012857806379ba5097146103585780637a0ed6271461036d5780637b1039991461038f5780638ab5150a146103c3576101ac565b806352ef6b2c146102f657806354e7796f14610318578063717dbd4c14610338576101ac565b80632c4080591161017f5780632c408059146102895780633603d758146102b6578063485cc955146102d6576101ac565b806301ffc9a71461021f57806309ed4607146102545780631f931c1c14610269576101ac565b366101ac57005b60006101b66105d9565b90506001600160a01b0381163b6101f9576040517f87c9fc3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610218573d6000f35b3d6000fd5b005b34801561022b57600080fd5b5061023f61023a366004613238565b6105fb565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061021d610640565b34801561027557600080fd5b5061021d6102843660046132b4565b6106ff565b34801561029557600080fd5b5061029e610789565b6040516001600160a01b03909116815260200161024b565b3480156102c257600080fd5b5061021d6102d1366004613363565b6107bc565b3480156102e257600080fd5b5061021d6102f136600461337c565b610809565b34801561030257600080fd5b5061030b610c05565b60405161024b91906133b5565b34801561032457600080fd5b5061021d610333366004613410565b610ddb565b34801561034457600080fd5b5061021d610353366004613542565b610e48565b34801561036457600080fd5b5061021d610ee9565b34801561037957600080fd5b50610382610f45565b60405161024b91906135ce565b34801561039b57600080fd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cf57600080fd5b5061029e6113f4565b3480156103e457600080fd5b5061029e6113fe565b3480156103f957600080fd5b5061021d61040836600461364b565b611408565b34801561041957600080fd5b5061021d610428366004613668565b61148e565b34801561043957600080fd5b5061021d610448366004613686565b611498565b34801561045957600080fd5b5061023f6104683660046136c8565b6114a8565b34801561047957600080fd5b5061048d6104883660046136ff565b611503565b60405161024b9190613791565b3480156104a657600080fd5b506104ba6104b536600461364b565b611518565b60405161024b91906137f3565b3480156104d357600080fd5b5061029e6104e2366004613238565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561052c57600080fd5b5061054061053b366004613363565b611697565b60405167ffffffffffffffff909116815260200161024b565b34801561056557600080fd5b5061029e610574366004613238565b6116a2565b34801561058557600080fd5b5061048d610594366004613806565b611797565b3480156105a557600080fd5b5061023f6105b436600461337c565b6117a4565b3480156105c557600080fd5b5061021d6105d436600461364b565b6117f3565b60006105f06000356001600160e01b0319166116a2565b905090565b3b151590565b600061060682611f52565b8061063a57507f4fbf0433000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600061064b3061205a565b6040517f485cc9550000000000000000000000000000000000000000000000000000000081523360048201523060248201529091506001600160a01b0382169063485cc95590604401600060405180830381600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b50506040516001600160a01b03841692503391507f40961b548e4af03f13fc20c42826b938367a56f2a4409159d6a597f34592605190600090a350565b6107076120f6565b6001600160a01b0316336001600160a01b03161461073857604051632f7a8ee160e01b815260040160405180910390fd5b6107826107458587613852565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061212992505050565b5050505050565b60006105f07f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b806107c68161233f565b6107fc576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61080582612427565b5050565b6108138282611835565b6001600160a01b038116610b8b57604080516008808252610120820190925260009160208201610100803683370190505090506000637b10399960e01b828261085b8161393b565b93508151811061086d5761086d613955565b6001600160e01b0319909216602092830291909101909101527fa22cb4650000000000000000000000000000000000000000000000000000000082826108b28161393b565b9350815181106108c4576108c4613955565b6001600160e01b0319909216602092830291909101909101527fe985e9c50000000000000000000000000000000000000000000000000000000082826109098161393b565b93508151811061091b5761091b613955565b6001600160e01b0319909216602092830291909101909101527fa4b91a010000000000000000000000000000000000000000000000000000000082826109608161393b565b93508151811061097257610972613955565b6001600160e01b0319909216602092830291909101909101527fa9784b3e0000000000000000000000000000000000000000000000000000000082826109b78161393b565b9350815181106109c9576109c9613955565b6001600160e01b0319909216602092830291909101909101527fd700ff33000000000000000000000000000000000000000000000000000000008282610a0e8161393b565b935081518110610a2057610a20613955565b6001600160e01b0319909216602092830291909101909101527f3603d758000000000000000000000000000000000000000000000000000000008282610a658161393b565b935081518110610a7757610a77613955565b6001600160e01b0319909216602092830291909101909101527f09ed4607000000000000000000000000000000000000000000000000000000008282610abc8161393b565b935081518110610ace57610ace613955565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610aff57905050604080516060810190915230815290915060208101600081526020018481525081600081518110610b6157610b61613955565b6020026020010181905250610b8781600060405180602001604052806000815250612129565b5050505b610b9d637b10399960e01b60016124d8565b610bc87fe103286b0000000000000000000000000000000000000000000000000000000060016124d8565b610bda637b10399960e01b60016124d8565b6108057f09ed46070000000000000000000000000000000000000000000000000000000060016124d8565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610c6857610c6861343c565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610dd3576000818152600285016020526040812054905b6008811015610dbe5783610cd08161393b565b600188015490955061ffff1685119050610dbe57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b88811015610d61578a8181518110610d2657610d26613955565b60200260200101516001600160a01b0316836001600160a01b031603610d4f5760019150610d61565b80610d598161393b565b915050610d0c565b508015610d7057505050610dac565b818a8981518110610d8357610d83613955565b6001600160a01b039092166020928302919091019091015287610da58161393b565b9850505050505b80610db68161393b565b915050610cbd565b50508080610dcb9061393b565b915050610c9a565b505082525090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b03163314610e3e576040517f3058081000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61080582826124d8565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b03163314610eab576040517f3058081000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815160005b81811015610ee357610edb848281518110610ecd57610ecd613955565b6020026020010151846124d8565b600101610eb0565b50505050565b610ef1612567565b6001600160a01b0316336001600160a01b031614610f3b576040517fefd1052d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f4361258f565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610fa857610fa861343c565b604051908082528060200260200182016040528015610fee57816020015b604080518082019091526000815260606020820152815260200190600190039081610fc65790505b50600182015490925060009061ffff1667ffffffffffffffff8111156110165761101661343c565b60405190808252806020026020018201604052801561103f578160200160208202803683370190505b50905060008060005b600185015461ffff16821015611382576000818152600286016020526040812054905b600881101561136d578361107e8161393b565b600189015490955061ffff168511905061136d57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b8881101561120157826001600160a01b03168c82815181106110de576110de613955565b6020026020010151600001516001600160a01b0316036111ef57838c828151811061110b5761110b613955565b6020026020010151602001518b838151811061112957611129613955565b602002602001015160ff168151811061114457611144613955565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a82815181106111a4576111a4613955565b602002602001015160ff16106111b957600080fd5b8981815181106111cb576111cb613955565b6020026020010180518091906111e090613981565b60ff1690525060019150611201565b806111f98161393b565b9150506110ba565b5080156112105750505061135b565b818b898151811061122357611223613955565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561125c5761125c61343c565b604051908082528060200260200182016040528015611285578160200160208202803683370190505b508b898151811061129857611298613955565b602002602001015160200181905250828b89815181106112ba576112ba613955565b6020026020010151602001516000815181106112d8576112d8613955565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600189898151811061133857611338613955565b60ff90921660209283029190910190910152876113548161393b565b9850505050505b806113658161393b565b91505061106b565b5050808061137a9061393b565b915050611048565b5060005b828110156113e95760008482815181106113a2576113a2613955565b602002602001015160ff16905060008783815181106113c3576113c3613955565b6020026020010151602001519050818152505080806113e19061393b565b915050611386565b508185525050505090565b60006105f0612567565b60006105f06120f6565b6114106120f6565b6001600160a01b0316336001600160a01b03161461144157604051632f7a8ee160e01b815260040160405180910390fd5b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b61080582826125d6565b6114a38383836126e4565b505050565b6001600160a01b0380841660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbf60209081526040808320868452825280832093851683529290529081205460ff165b949350505050565b6060611511600084846127db565b9392505050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff81111561157b5761157b61343c565b6040519080825280602002602001820160405280156115a4578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561168d576000818152600285016020526040812054905b600881101561167857836115e38161393b565b600188015490955061ffff168511905061167857600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a1603611665578088878151811061163e5761163e613955565b6001600160e01b031990921660209283029190910190910152856116618161393b565b9650505b50806116708161393b565b9150506115d0565b505080806116859061393b565b9150506115ad565b5050825250919050565b600061063a826129b4565b6001600160e01b0319811660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602081905260409091205460601c908082611790577f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b0316925082156117905760405163dc9cc64560e01b81526001600160e01b0319851660048201526001600160a01b0384169063dc9cc64590602401602060405180830381865afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906139a0565b92505b5050919050565b60606114fb8484846127db565b6001600160a01b0380831660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe6020908152604080832093851683529290529081205460ff16611511565b6117fb6120f6565b6001600160a01b0316336001600160a01b03161461182c57604051632f7a8ee160e01b815260040160405180910390fd5b61148b81612a2c565b7fb40d49f5a32ade8065d600aab18d96945a09d7fbb3e248099e22f7c4c10e01898054819060ff16156118af5760405162461bcd60e51b815260206004820152600b60248201527f496e697469616c697a656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316611dc55760408051600d8082526101c08201909252600091602082016101a08036833701905050905060007f2c4080590000000000000000000000000000000000000000000000000000000082826119108161393b565b93508151811061192257611922613955565b6001600160e01b0319909216602092830291909101909101527f914237650000000000000000000000000000000000000000000000000000000082826119678161393b565b93508151811061197957611979613955565b6001600160e01b03199092166020928302919091019091015263dc9cc64560e01b82826119a58161393b565b9350815181106119b7576119b7613955565b6001600160e01b0319909216602092830291909101909101527f1f931c1c0000000000000000000000000000000000000000000000000000000082826119fc8161393b565b935081518110611a0e57611a0e613955565b6001600160e01b0319909216602092830291909101909101527f7a0ed627000000000000000000000000000000000000000000000000000000008282611a538161393b565b935081518110611a6557611a65613955565b6001600160e01b0319909216602092830291909101909101527fadfca15e000000000000000000000000000000000000000000000000000000008282611aaa8161393b565b935081518110611abc57611abc613955565b6001600160e01b0319909216602092830291909101909101527f52ef6b2c000000000000000000000000000000000000000000000000000000008282611b018161393b565b935081518110611b1357611b13613955565b6001600160e01b0319909216602092830291909101909101527fcdffacc6000000000000000000000000000000000000000000000000000000008282611b588161393b565b935081518110611b6a57611b6a613955565b6001600160e01b0319909216602092830291909101909101526301ffc9a760e01b8282611b968161393b565b935081518110611ba857611ba8613955565b6001600160e01b0319909216602092830291909101909101527f8da5cb5b000000000000000000000000000000000000000000000000000000008282611bed8161393b565b935081518110611bff57611bff613955565b6001600160e01b0319909216602092830291909101909101527f8ab5150a000000000000000000000000000000000000000000000000000000008282611c448161393b565b935081518110611c5657611c56613955565b6001600160e01b0319909216602092830291909101909101527ff2fde38b000000000000000000000000000000000000000000000000000000008282611c9b8161393b565b935081518110611cad57611cad613955565b6001600160e01b0319909216602092830291909101909101527f79ba5097000000000000000000000000000000000000000000000000000000008282611cf28161393b565b935081518110611d0457611d04613955565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081611d3557905050604080516060810190915230815290915060208101600081526020018481525081600081518110611d9757611d97613955565b6020026020010181905250611dbd81600060405180602001604052806000815250612129565b505050611e0d565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b611e1f63dc9cc64560e01b60016124d8565b611e4a7fbd02b73c0000000000000000000000000000000000000000000000000000000060016124d8565b611e757f1f931c1c0000000000000000000000000000000000000000000000000000000060016124d8565b611ea07f48e2b0930000000000000000000000000000000000000000000000000000000060016124d8565b611eb26301ffc9a760e01b60016124d8565b611edd7f7f5828d00000000000000000000000000000000000000000000000000000000060016124d8565b610ee384612a7a565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604090205460ff1680612055576000611fc67f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b90506001600160a01b0381161561205357818061205057506040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801561202c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205091906139bd565b91505b505b919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166120555760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016118a6565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94547f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff8116908190600090600716156121985750600381901c60009081526002840160205260409020545b60005b87518110156122965760008882815181106121b8576121b8613955565b6020026020010151905060008160200151905081604001515160000361220a576040517feb6c3aeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600281111561221e5761221e61396b565b036122395761222f87868685612b01565b909550935061228c565b600181600281111561224d5761224d61396b565b036122615761225c8783612c5e565b61228c565b60028160028111156122755761227561396b565b0361228c5761228687868685612df4565b90955093505b505060010161219b565b508282146122cf576001840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555b60078216156122f157600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051612324939291906139da565b60405180910390a1612336868661307c565b50505050505050565b60408051336024820152604480820184905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f25f367040000000000000000000000000000000000000000000000000000000017905290516000918291829130916123bf9190613ac1565b600060405180830381855afa9150503d80600081146123fa576040519150601f19603f3d011682016040523d82523d6000602084013e6123ff565b606091505b509150915081612413575060009392505050565b8080602001905181019061178d91906139bd565b61242f613175565b6001600160a01b0316632d4d6ccf826040518263ffffffff1660e01b815260040161245c91815260200190565b600060405180830381600087803b15801561247657600080fd5b505af115801561248a573d6000803e3d6000fd5b50505050807fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db4446124b9836129b4565b60405167ffffffffffffffff909116815260200160405180910390a250565b6001600160e01b0319808316900361251c576040517fb0a19dd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789061211a565b61259833612a7a565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b03821633036126545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016118a6565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe336000818152602083815260408083206001600160a01b03891680855290835292819020805460ff1916881515908117909155905190815293945090927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038216330361273c5760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c6660448201526064016118a6565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe336000818152600183016020908152604080832089845282528083206001600160a01b03891680855290835292819020805460ff19168815159081179091559051938452939450909187917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a450505050565b60608167ffffffffffffffff8111156127f6576127f661343c565b60405190808252806020026020018201604052801561282957816020015b60608152602001906001900390816128145790505b50905060005b828110156129ac5784156128f457600084848381811061285157612851613955565b90506020028101906128639190613add565b61287291602491600491613b42565b61287b91613b6c565b90508581146128f25760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d656861736800000000000000000000000060648201526084016118a6565b505b6000803086868581811061290a5761290a613955565b905060200281019061291c9190613add565b60405161292a929190613b8a565b600060405180830381855af49150503d8060008114612965576040519150601f19603f3d011682016040523d82523d6000602084013e61296a565b606091505b50915091508161297957600080fd5b8084848151811061298c5761298c613955565b6020026020010181905250505080806129a49061393b565b91505061282f565b509392505050565b60006129be613175565b6001600160a01b031663eff94ac7836040518263ffffffff1660e01b81526004016129eb91815260200190565b602060405180830381865afa158015612a08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190613b9a565b61148b817f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b805160009081906001600160a01b03163014801590612b29575082516001600160a01b03163b155b15612b4757604051633ddc5cab60e21b815260040160405180910390fd5b60005b836040015151811015612c5157600084604001518281518110612b6f57612b6f613955565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c15612bd4576040517f92474ee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c19999099161797819003612c4257600389901c600090815260028b0160205260408120989098555b50505060019586019501612b4a565b5093959294509192505050565b80516001600160a01b03163b612c8757604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156114a357600082604001518281518110612caf57612caf613955565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c80612d14576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b306001600160a01b03821603612d56576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b031603612da5576040517f617557e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff91909116179055600101612c8a565b805160009081906001600160a01b031615612e3b576040517feacd242400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600385901c6007861660005b85604001515181101561306857600086604001518281518110612e6c57612e6c613955565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c612ed0576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b30606082901c03612f0d576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000899003612f3957600019909401600081815260028c01602052604090205498509360079350612f41565b600019909301925b600584901b89901b6000806001600160e01b031980841690861614612f9d576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461300057600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055613039565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c816001600160e01b031960001b901c198d16179b505b8660000361305757600088815260028f01602052604081208190559b505b505060019093019250612e47915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146130c1576040517f26df4ccd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821615610805576001600160a01b0382163014613108576001600160a01b0382163b61310857604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b0316826040516131229190613ac1565b600060405180830381855af49150503d806000811461315d576040519150601f19603f3d011682016040523d82523d6000602084013e613162565b606091505b50509050806114a3573d6000803e3d6000fd5b600061317f6131e0565b6001600160a01b0316635ea1d46a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f091906139a0565b6000306001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131bc573d6000803e3d6000fd5b80356001600160e01b03198116811461205557600080fd5b60006020828403121561324a57600080fd5b61151182613220565b60008083601f84011261326557600080fd5b50813567ffffffffffffffff81111561327d57600080fd5b6020830191508360208260051b850101111561329857600080fd5b9250929050565b6001600160a01b038116811461148b57600080fd5b6000806000806000606086880312156132cc57600080fd5b853567ffffffffffffffff808211156132e457600080fd5b6132f089838a01613253565b9097509550602088013591506133058261329f565b9093506040870135908082111561331b57600080fd5b818801915088601f83011261332f57600080fd5b81358181111561333e57600080fd5b89602082850101111561335057600080fd5b9699959850939650602001949392505050565b60006020828403121561337557600080fd5b5035919050565b6000806040838503121561338f57600080fd5b823561339a8161329f565b915060208301356133aa8161329f565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156133f65783516001600160a01b0316835292840192918401916001016133d1565b50909695505050505050565b801515811461148b57600080fd5b6000806040838503121561342357600080fd5b61342c83613220565b915060208301356133aa81613402565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156134755761347561343c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156134a4576134a461343c565b604052919050565b600067ffffffffffffffff8211156134c6576134c661343c565b5060051b60200190565b600082601f8301126134e157600080fd5b813560206134f66134f1836134ac565b61347b565b82815260059290921b8401810191818101908684111561351557600080fd5b8286015b848110156135375761352a81613220565b8352918301918301613519565b509695505050505050565b6000806040838503121561355557600080fd5b823567ffffffffffffffff81111561356c57600080fd5b613578858286016134d0565b92505060208301356133aa81613402565b600081518084526020808501945080840160005b838110156135c35781516001600160e01b0319168752958201959082019060010161359d565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561363d57888303603f19018552815180516001600160a01b0316845287015187840187905261362a87850182613589565b95880195935050908601906001016135f5565b509098975050505050505050565b60006020828403121561365d57600080fd5b81356115118161329f565b6000806040838503121561367b57600080fd5b823561342c8161329f565b60008060006060848603121561369b57600080fd5b8335925060208401356136ad8161329f565b915060408401356136bd81613402565b809150509250925092565b6000806000606084860312156136dd57600080fd5b83356136e88161329f565b92506020840135915060408401356136bd8161329f565b6000806020838503121561371257600080fd5b823567ffffffffffffffff81111561372957600080fd5b61373585828601613253565b90969095509350505050565b60005b8381101561375c578181015183820152602001613744565b50506000910152565b6000815180845261377d816020860160208601613741565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156137e657603f198886030184526137d4858351613765565b945092850192908501906001016137b8565b5092979650505050505050565b6020815260006115116020830184613589565b60008060006040848603121561381b57600080fd5b83359250602084013567ffffffffffffffff81111561383957600080fd5b61384586828701613253565b9497909650939450505050565b60006138606134f1846134ac565b80848252602080830192508560051b85013681111561387e57600080fd5b855b8181101561391957803567ffffffffffffffff808211156138a15760008081fd5b8189019150606082360312156138b75760008081fd5b6138bf613452565b82356138ca8161329f565b815282860135600381106138de5760008081fd5b81870152604083810135838111156138f65760008081fd5b613902368287016134d0565b918301919091525087525050938201938201613880565b50919695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019820361394e5761394e613925565b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060ff821660ff810361399757613997613925565b60010192915050565b6000602082840312156139b257600080fd5b81516115118161329f565b6000602082840312156139cf57600080fd5b815161151181613402565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015613a91577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301865282516001600160a01b0381511688528481015160038110613a6257634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052613a7e89890182613589565b9750509483019491830191600101613a04565b5050506001600160a01b0389169087015250508381036040850152613ab68186613765565b979650505050505050565b60008251613ad3818460208701613741565b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613b1257600080fd5b83018035915067ffffffffffffffff821115613b2d57600080fd5b60200191503681900382131561329857600080fd5b60008085851115613b5257600080fd5b83861115613b5f57600080fd5b5050820193919092039150565b8035602083101561063a57600019602084900360031b1b1692915050565b8183823760009101908152919050565b600060208284031215613bac57600080fd5b815167ffffffffffffffff8116811461151157600080fdfea26469706673582212209be08ab9c63590b79e0ed0c478c23c005dfb4961c97992bf02ef68caeea2f2c464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101a55760003560e01c80638da5cb5b116100e1578063adfca15e1161008a578063dc9cc64511610064578063dc9cc64514610559578063e32954eb14610579578063e985e9c514610599578063f2fde38b146105b9576101ac565b8063adfca15e1461049a578063cdffacc6146104c7578063d700ff3314610520576101ac565b8063a4b91a01116100bb578063a4b91a011461042d578063a9784b3e1461044d578063ac9650d81461046d576101ac565b80638da5cb5b146103d857806391423765146103ed578063a22cb4651461040d576101ac565b806352ef6b2c1161014e57806379ba50971161012857806379ba5097146103585780637a0ed6271461036d5780637b1039991461038f5780638ab5150a146103c3576101ac565b806352ef6b2c146102f657806354e7796f14610318578063717dbd4c14610338576101ac565b80632c4080591161017f5780632c408059146102895780633603d758146102b6578063485cc955146102d6576101ac565b806301ffc9a71461021f57806309ed4607146102545780631f931c1c14610269576101ac565b366101ac57005b60006101b66105d9565b90506001600160a01b0381163b6101f9576040517f87c9fc3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610218573d6000f35b3d6000fd5b005b34801561022b57600080fd5b5061023f61023a366004613238565b6105fb565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061021d610640565b34801561027557600080fd5b5061021d6102843660046132b4565b6106ff565b34801561029557600080fd5b5061029e610789565b6040516001600160a01b03909116815260200161024b565b3480156102c257600080fd5b5061021d6102d1366004613363565b6107bc565b3480156102e257600080fd5b5061021d6102f136600461337c565b610809565b34801561030257600080fd5b5061030b610c05565b60405161024b91906133b5565b34801561032457600080fd5b5061021d610333366004613410565b610ddb565b34801561034457600080fd5b5061021d610353366004613542565b610e48565b34801561036457600080fd5b5061021d610ee9565b34801561037957600080fd5b50610382610f45565b60405161024b91906135ce565b34801561039b57600080fd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cf57600080fd5b5061029e6113f4565b3480156103e457600080fd5b5061029e6113fe565b3480156103f957600080fd5b5061021d61040836600461364b565b611408565b34801561041957600080fd5b5061021d610428366004613668565b61148e565b34801561043957600080fd5b5061021d610448366004613686565b611498565b34801561045957600080fd5b5061023f6104683660046136c8565b6114a8565b34801561047957600080fd5b5061048d6104883660046136ff565b611503565b60405161024b9190613791565b3480156104a657600080fd5b506104ba6104b536600461364b565b611518565b60405161024b91906137f3565b3480156104d357600080fd5b5061029e6104e2366004613238565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561052c57600080fd5b5061054061053b366004613363565b611697565b60405167ffffffffffffffff909116815260200161024b565b34801561056557600080fd5b5061029e610574366004613238565b6116a2565b34801561058557600080fd5b5061048d610594366004613806565b611797565b3480156105a557600080fd5b5061023f6105b436600461337c565b6117a4565b3480156105c557600080fd5b5061021d6105d436600461364b565b6117f3565b60006105f06000356001600160e01b0319166116a2565b905090565b3b151590565b600061060682611f52565b8061063a57507f4fbf0433000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600061064b3061205a565b6040517f485cc9550000000000000000000000000000000000000000000000000000000081523360048201523060248201529091506001600160a01b0382169063485cc95590604401600060405180830381600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b50506040516001600160a01b03841692503391507f40961b548e4af03f13fc20c42826b938367a56f2a4409159d6a597f34592605190600090a350565b6107076120f6565b6001600160a01b0316336001600160a01b03161461073857604051632f7a8ee160e01b815260040160405180910390fd5b6107826107458587613852565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061212992505050565b5050505050565b60006105f07f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b806107c68161233f565b6107fc576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61080582612427565b5050565b6108138282611835565b6001600160a01b038116610b8b57604080516008808252610120820190925260009160208201610100803683370190505090506000637b10399960e01b828261085b8161393b565b93508151811061086d5761086d613955565b6001600160e01b0319909216602092830291909101909101527fa22cb4650000000000000000000000000000000000000000000000000000000082826108b28161393b565b9350815181106108c4576108c4613955565b6001600160e01b0319909216602092830291909101909101527fe985e9c50000000000000000000000000000000000000000000000000000000082826109098161393b565b93508151811061091b5761091b613955565b6001600160e01b0319909216602092830291909101909101527fa4b91a010000000000000000000000000000000000000000000000000000000082826109608161393b565b93508151811061097257610972613955565b6001600160e01b0319909216602092830291909101909101527fa9784b3e0000000000000000000000000000000000000000000000000000000082826109b78161393b565b9350815181106109c9576109c9613955565b6001600160e01b0319909216602092830291909101909101527fd700ff33000000000000000000000000000000000000000000000000000000008282610a0e8161393b565b935081518110610a2057610a20613955565b6001600160e01b0319909216602092830291909101909101527f3603d758000000000000000000000000000000000000000000000000000000008282610a658161393b565b935081518110610a7757610a77613955565b6001600160e01b0319909216602092830291909101909101527f09ed4607000000000000000000000000000000000000000000000000000000008282610abc8161393b565b935081518110610ace57610ace613955565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610aff57905050604080516060810190915230815290915060208101600081526020018481525081600081518110610b6157610b61613955565b6020026020010181905250610b8781600060405180602001604052806000815250612129565b5050505b610b9d637b10399960e01b60016124d8565b610bc87fe103286b0000000000000000000000000000000000000000000000000000000060016124d8565b610bda637b10399960e01b60016124d8565b6108057f09ed46070000000000000000000000000000000000000000000000000000000060016124d8565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610c6857610c6861343c565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610dd3576000818152600285016020526040812054905b6008811015610dbe5783610cd08161393b565b600188015490955061ffff1685119050610dbe57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b88811015610d61578a8181518110610d2657610d26613955565b60200260200101516001600160a01b0316836001600160a01b031603610d4f5760019150610d61565b80610d598161393b565b915050610d0c565b508015610d7057505050610dac565b818a8981518110610d8357610d83613955565b6001600160a01b039092166020928302919091019091015287610da58161393b565b9850505050505b80610db68161393b565b915050610cbd565b50508080610dcb9061393b565b915050610c9a565b505082525090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b03163314610e3e576040517f3058081000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61080582826124d8565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b03163314610eab576040517f3058081000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815160005b81811015610ee357610edb848281518110610ecd57610ecd613955565b6020026020010151846124d8565b600101610eb0565b50505050565b610ef1612567565b6001600160a01b0316336001600160a01b031614610f3b576040517fefd1052d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f4361258f565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610fa857610fa861343c565b604051908082528060200260200182016040528015610fee57816020015b604080518082019091526000815260606020820152815260200190600190039081610fc65790505b50600182015490925060009061ffff1667ffffffffffffffff8111156110165761101661343c565b60405190808252806020026020018201604052801561103f578160200160208202803683370190505b50905060008060005b600185015461ffff16821015611382576000818152600286016020526040812054905b600881101561136d578361107e8161393b565b600189015490955061ffff168511905061136d57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b8881101561120157826001600160a01b03168c82815181106110de576110de613955565b6020026020010151600001516001600160a01b0316036111ef57838c828151811061110b5761110b613955565b6020026020010151602001518b838151811061112957611129613955565b602002602001015160ff168151811061114457611144613955565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a82815181106111a4576111a4613955565b602002602001015160ff16106111b957600080fd5b8981815181106111cb576111cb613955565b6020026020010180518091906111e090613981565b60ff1690525060019150611201565b806111f98161393b565b9150506110ba565b5080156112105750505061135b565b818b898151811061122357611223613955565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561125c5761125c61343c565b604051908082528060200260200182016040528015611285578160200160208202803683370190505b508b898151811061129857611298613955565b602002602001015160200181905250828b89815181106112ba576112ba613955565b6020026020010151602001516000815181106112d8576112d8613955565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600189898151811061133857611338613955565b60ff90921660209283029190910190910152876113548161393b565b9850505050505b806113658161393b565b91505061106b565b5050808061137a9061393b565b915050611048565b5060005b828110156113e95760008482815181106113a2576113a2613955565b602002602001015160ff16905060008783815181106113c3576113c3613955565b6020026020010151602001519050818152505080806113e19061393b565b915050611386565b508185525050505090565b60006105f0612567565b60006105f06120f6565b6114106120f6565b6001600160a01b0316336001600160a01b03161461144157604051632f7a8ee160e01b815260040160405180910390fd5b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b61080582826125d6565b6114a38383836126e4565b505050565b6001600160a01b0380841660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbf60209081526040808320868452825280832093851683529290529081205460ff165b949350505050565b6060611511600084846127db565b9392505050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff81111561157b5761157b61343c565b6040519080825280602002602001820160405280156115a4578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561168d576000818152600285016020526040812054905b600881101561167857836115e38161393b565b600188015490955061ffff168511905061167857600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a1603611665578088878151811061163e5761163e613955565b6001600160e01b031990921660209283029190910190910152856116618161393b565b9650505b50806116708161393b565b9150506115d0565b505080806116859061393b565b9150506115ad565b5050825250919050565b600061063a826129b4565b6001600160e01b0319811660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602081905260409091205460601c908082611790577f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b0316925082156117905760405163dc9cc64560e01b81526001600160e01b0319851660048201526001600160a01b0384169063dc9cc64590602401602060405180830381865afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906139a0565b92505b5050919050565b60606114fb8484846127db565b6001600160a01b0380831660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe6020908152604080832093851683529290529081205460ff16611511565b6117fb6120f6565b6001600160a01b0316336001600160a01b03161461182c57604051632f7a8ee160e01b815260040160405180910390fd5b61148b81612a2c565b7fb40d49f5a32ade8065d600aab18d96945a09d7fbb3e248099e22f7c4c10e01898054819060ff16156118af5760405162461bcd60e51b815260206004820152600b60248201527f496e697469616c697a656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316611dc55760408051600d8082526101c08201909252600091602082016101a08036833701905050905060007f2c4080590000000000000000000000000000000000000000000000000000000082826119108161393b565b93508151811061192257611922613955565b6001600160e01b0319909216602092830291909101909101527f914237650000000000000000000000000000000000000000000000000000000082826119678161393b565b93508151811061197957611979613955565b6001600160e01b03199092166020928302919091019091015263dc9cc64560e01b82826119a58161393b565b9350815181106119b7576119b7613955565b6001600160e01b0319909216602092830291909101909101527f1f931c1c0000000000000000000000000000000000000000000000000000000082826119fc8161393b565b935081518110611a0e57611a0e613955565b6001600160e01b0319909216602092830291909101909101527f7a0ed627000000000000000000000000000000000000000000000000000000008282611a538161393b565b935081518110611a6557611a65613955565b6001600160e01b0319909216602092830291909101909101527fadfca15e000000000000000000000000000000000000000000000000000000008282611aaa8161393b565b935081518110611abc57611abc613955565b6001600160e01b0319909216602092830291909101909101527f52ef6b2c000000000000000000000000000000000000000000000000000000008282611b018161393b565b935081518110611b1357611b13613955565b6001600160e01b0319909216602092830291909101909101527fcdffacc6000000000000000000000000000000000000000000000000000000008282611b588161393b565b935081518110611b6a57611b6a613955565b6001600160e01b0319909216602092830291909101909101526301ffc9a760e01b8282611b968161393b565b935081518110611ba857611ba8613955565b6001600160e01b0319909216602092830291909101909101527f8da5cb5b000000000000000000000000000000000000000000000000000000008282611bed8161393b565b935081518110611bff57611bff613955565b6001600160e01b0319909216602092830291909101909101527f8ab5150a000000000000000000000000000000000000000000000000000000008282611c448161393b565b935081518110611c5657611c56613955565b6001600160e01b0319909216602092830291909101909101527ff2fde38b000000000000000000000000000000000000000000000000000000008282611c9b8161393b565b935081518110611cad57611cad613955565b6001600160e01b0319909216602092830291909101909101527f79ba5097000000000000000000000000000000000000000000000000000000008282611cf28161393b565b935081518110611d0457611d04613955565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081611d3557905050604080516060810190915230815290915060208101600081526020018481525081600081518110611d9757611d97613955565b6020026020010181905250611dbd81600060405180602001604052806000815250612129565b505050611e0d565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b611e1f63dc9cc64560e01b60016124d8565b611e4a7fbd02b73c0000000000000000000000000000000000000000000000000000000060016124d8565b611e757f1f931c1c0000000000000000000000000000000000000000000000000000000060016124d8565b611ea07f48e2b0930000000000000000000000000000000000000000000000000000000060016124d8565b611eb26301ffc9a760e01b60016124d8565b611edd7f7f5828d00000000000000000000000000000000000000000000000000000000060016124d8565b610ee384612a7a565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604090205460ff1680612055576000611fc67f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b90506001600160a01b0381161561205357818061205057506040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801561202c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205091906139bd565b91505b505b919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166120555760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016118a6565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94547f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff8116908190600090600716156121985750600381901c60009081526002840160205260409020545b60005b87518110156122965760008882815181106121b8576121b8613955565b6020026020010151905060008160200151905081604001515160000361220a576040517feb6c3aeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600281111561221e5761221e61396b565b036122395761222f87868685612b01565b909550935061228c565b600181600281111561224d5761224d61396b565b036122615761225c8783612c5e565b61228c565b60028160028111156122755761227561396b565b0361228c5761228687868685612df4565b90955093505b505060010161219b565b508282146122cf576001840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555b60078216156122f157600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051612324939291906139da565b60405180910390a1612336868661307c565b50505050505050565b60408051336024820152604480820184905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f25f367040000000000000000000000000000000000000000000000000000000017905290516000918291829130916123bf9190613ac1565b600060405180830381855afa9150503d80600081146123fa576040519150601f19603f3d011682016040523d82523d6000602084013e6123ff565b606091505b509150915081612413575060009392505050565b8080602001905181019061178d91906139bd565b61242f613175565b6001600160a01b0316632d4d6ccf826040518263ffffffff1660e01b815260040161245c91815260200190565b600060405180830381600087803b15801561247657600080fd5b505af115801561248a573d6000803e3d6000fd5b50505050807fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db4446124b9836129b4565b60405167ffffffffffffffff909116815260200160405180910390a250565b6001600160e01b0319808316900361251c576040517fb0a19dd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789061211a565b61259833612a7a565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b03821633036126545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016118a6565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe336000818152602083815260408083206001600160a01b03891680855290835292819020805460ff1916881515908117909155905190815293945090927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038216330361273c5760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c6660448201526064016118a6565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe336000818152600183016020908152604080832089845282528083206001600160a01b03891680855290835292819020805460ff19168815159081179091559051938452939450909187917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a450505050565b60608167ffffffffffffffff8111156127f6576127f661343c565b60405190808252806020026020018201604052801561282957816020015b60608152602001906001900390816128145790505b50905060005b828110156129ac5784156128f457600084848381811061285157612851613955565b90506020028101906128639190613add565b61287291602491600491613b42565b61287b91613b6c565b90508581146128f25760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d656861736800000000000000000000000060648201526084016118a6565b505b6000803086868581811061290a5761290a613955565b905060200281019061291c9190613add565b60405161292a929190613b8a565b600060405180830381855af49150503d8060008114612965576040519150601f19603f3d011682016040523d82523d6000602084013e61296a565b606091505b50915091508161297957600080fd5b8084848151811061298c5761298c613955565b6020026020010181905250505080806129a49061393b565b91505061282f565b509392505050565b60006129be613175565b6001600160a01b031663eff94ac7836040518263ffffffff1660e01b81526004016129eb91815260200190565b602060405180830381865afa158015612a08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190613b9a565b61148b817f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b805160009081906001600160a01b03163014801590612b29575082516001600160a01b03163b155b15612b4757604051633ddc5cab60e21b815260040160405180910390fd5b60005b836040015151811015612c5157600084604001518281518110612b6f57612b6f613955565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c15612bd4576040517f92474ee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c19999099161797819003612c4257600389901c600090815260028b0160205260408120989098555b50505060019586019501612b4a565b5093959294509192505050565b80516001600160a01b03163b612c8757604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156114a357600082604001518281518110612caf57612caf613955565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c80612d14576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b306001600160a01b03821603612d56576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b031603612da5576040517f617557e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff91909116179055600101612c8a565b805160009081906001600160a01b031615612e3b576040517feacd242400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600385901c6007861660005b85604001515181101561306857600086604001518281518110612e6c57612e6c613955565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c612ed0576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b30606082901c03612f0d576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000899003612f3957600019909401600081815260028c01602052604090205498509360079350612f41565b600019909301925b600584901b89901b6000806001600160e01b031980841690861614612f9d576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461300057600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055613039565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c816001600160e01b031960001b901c198d16179b505b8660000361305757600088815260028f01602052604081208190559b505b505060019093019250612e47915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146130c1576040517f26df4ccd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821615610805576001600160a01b0382163014613108576001600160a01b0382163b61310857604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b0316826040516131229190613ac1565b600060405180830381855af49150503d806000811461315d576040519150601f19603f3d011682016040523d82523d6000602084013e613162565b606091505b50509050806114a3573d6000803e3d6000fd5b600061317f6131e0565b6001600160a01b0316635ea1d46a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f091906139a0565b6000306001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131bc573d6000803e3d6000fd5b80356001600160e01b03198116811461205557600080fd5b60006020828403121561324a57600080fd5b61151182613220565b60008083601f84011261326557600080fd5b50813567ffffffffffffffff81111561327d57600080fd5b6020830191508360208260051b850101111561329857600080fd5b9250929050565b6001600160a01b038116811461148b57600080fd5b6000806000806000606086880312156132cc57600080fd5b853567ffffffffffffffff808211156132e457600080fd5b6132f089838a01613253565b9097509550602088013591506133058261329f565b9093506040870135908082111561331b57600080fd5b818801915088601f83011261332f57600080fd5b81358181111561333e57600080fd5b89602082850101111561335057600080fd5b9699959850939650602001949392505050565b60006020828403121561337557600080fd5b5035919050565b6000806040838503121561338f57600080fd5b823561339a8161329f565b915060208301356133aa8161329f565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156133f65783516001600160a01b0316835292840192918401916001016133d1565b50909695505050505050565b801515811461148b57600080fd5b6000806040838503121561342357600080fd5b61342c83613220565b915060208301356133aa81613402565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156134755761347561343c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156134a4576134a461343c565b604052919050565b600067ffffffffffffffff8211156134c6576134c661343c565b5060051b60200190565b600082601f8301126134e157600080fd5b813560206134f66134f1836134ac565b61347b565b82815260059290921b8401810191818101908684111561351557600080fd5b8286015b848110156135375761352a81613220565b8352918301918301613519565b509695505050505050565b6000806040838503121561355557600080fd5b823567ffffffffffffffff81111561356c57600080fd5b613578858286016134d0565b92505060208301356133aa81613402565b600081518084526020808501945080840160005b838110156135c35781516001600160e01b0319168752958201959082019060010161359d565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561363d57888303603f19018552815180516001600160a01b0316845287015187840187905261362a87850182613589565b95880195935050908601906001016135f5565b509098975050505050505050565b60006020828403121561365d57600080fd5b81356115118161329f565b6000806040838503121561367b57600080fd5b823561342c8161329f565b60008060006060848603121561369b57600080fd5b8335925060208401356136ad8161329f565b915060408401356136bd81613402565b809150509250925092565b6000806000606084860312156136dd57600080fd5b83356136e88161329f565b92506020840135915060408401356136bd8161329f565b6000806020838503121561371257600080fd5b823567ffffffffffffffff81111561372957600080fd5b61373585828601613253565b90969095509350505050565b60005b8381101561375c578181015183820152602001613744565b50506000910152565b6000815180845261377d816020860160208601613741565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156137e657603f198886030184526137d4858351613765565b945092850192908501906001016137b8565b5092979650505050505050565b6020815260006115116020830184613589565b60008060006040848603121561381b57600080fd5b83359250602084013567ffffffffffffffff81111561383957600080fd5b61384586828701613253565b9497909650939450505050565b60006138606134f1846134ac565b80848252602080830192508560051b85013681111561387e57600080fd5b855b8181101561391957803567ffffffffffffffff808211156138a15760008081fd5b8189019150606082360312156138b75760008081fd5b6138bf613452565b82356138ca8161329f565b815282860135600381106138de5760008081fd5b81870152604083810135838111156138f65760008081fd5b613902368287016134d0565b918301919091525087525050938201938201613880565b50919695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019820361394e5761394e613925565b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060ff821660ff810361399757613997613925565b60010192915050565b6000602082840312156139b257600080fd5b81516115118161329f565b6000602082840312156139cf57600080fd5b815161151181613402565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015613a91577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301865282516001600160a01b0381511688528481015160038110613a6257634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052613a7e89890182613589565b9750509483019491830191600101613a04565b5050506001600160a01b0389169087015250508381036040850152613ab68186613765565b979650505050505050565b60008251613ad3818460208701613741565b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613b1257600080fd5b83018035915067ffffffffffffffff821115613b2d57600080fd5b60200191503681900382131561329857600080fd5b60008085851115613b5257600080fd5b83861115613b5f57600080fd5b5050820193919092039150565b8035602083101561063a57600019602084900360031b1b1692915050565b8183823760009101908152919050565b600060208284031215613bac57600080fd5b815167ffffffffffffffff8116811461151157600080fdfea26469706673582212209be08ab9c63590b79e0ed0c478c23c005dfb4961c97992bf02ef68caeea2f2c464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(bytes32,address,bool)": {
        "details": "Approve a delegate to be able to updated records on a node."
      },
      "clearRecords(bytes32)": {
        "params": {
          "node": "The node to update."
        }
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization function call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional target of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "getFallbackAddress()": {
        "returns": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "isApprovedFor(address,bytes32,address)": {
        "details": "Check to see if the delegate has been approved by the owner for the node."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "returns": {
          "_0": "contract owner"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setFallbackAddress(address)": {
        "params": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "clearRecords(bytes32)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "clone()": {
        "notice": "Clone DiamondResolver to customize your own resolver"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update diamond facets and optionally execute arbitrary initialization function"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "getFallbackAddress()": {
        "notice": "query the address of the fallback implementation"
      },
      "nomineeOwner()": {
        "notice": "get the nominated owner who has permission to call acceptOwnership"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "setFallbackAddress(address)": {
        "notice": "set the address of the fallback implementation"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}